***** DISABLED Another Doom Modeline
CLOSED: [2018-06-24 Sun 23:52]
[[https://github.com/torgeir/.emacs.d/blob/master/site-lisp/t-doom-modeline/t-doom-modeline.el][Torgeir's version]] of the [[https://github.com/hlissner/doom-emacs][doom mode line]]. 
#+BEGIN_SRC emacs-lisp :tangle no
  ;;; ui/doom-modeline/config.el -*- lexical-binding: t; -*-

  (defun t/project-root ()
    "Get project root without throwing"
    (let (projectile-require-project-root strict-p)
      (projectile-project-root)))

  ;; TODO torgeir added this
  (defun doom-project-root ()
    (require 'projectile)
    (t/project-root))


  (defmacro def-modeline-segment! (name &rest forms)
    "Defines a modeline segment and byte compiles it."
    (declare (indent defun) (doc-string 2))
    (let ((sym (intern (format "doom-modeline-segment--%s" name))))
      `(progn
         (defun ,sym () ,@forms)
         ,(unless (bound-and-true-p byte-compile-current-file)
            `(let (byte-compile-warnings)
               (byte-compile #',sym))))))

  (defsubst doom--prepare-modeline-segments (segments)
    (cl-loop for seg in segments
             if (stringp seg)
             collect seg
             else
             collect (list (intern (format "doom-modeline-segment--%s" (symbol-name seg))))))

  (defmacro def-modeline! (name lhs &optional rhs)
    "Defines a modeline format and byte-compiles it. NAME is a symbol to identify
  it (used by `doom-modeline' for retrieval). LHS and RHS are lists of symbols of
  modeline segments defined with `def-modeline-segment!'.
  Example:
    (def-modeline! minimal
      (bar matches \" \" buffer-info)
      (media-info major-mode))
    (doom-set-modeline 'minimal t)"
    (let ((sym (intern (format "doom-modeline-format--%s" name)))
          (lhs-forms (doom--prepare-modeline-segments lhs))
          (rhs-forms (doom--prepare-modeline-segments rhs)))
      `(progn
         (defun ,sym ()
           (let ((lhs (list ,@lhs-forms))
                 (rhs (list ,@rhs-forms)))
             (let ((rhs-str (format-mode-line rhs)))
               (list lhs
                     (propertize
                      " " 'display
                      `((space :align-to (- (+ right right-fringe right-margin)
                                            ,(+ 1 (string-width rhs-str))))))
                     rhs-str))))
         ,(unless (bound-and-true-p byte-compile-current-file)
            `(let (byte-compile-warnings)
               (byte-compile #',sym))))))

  (defun doom-modeline (key)
    "Returns a mode-line configuration associated with KEY (a symbol). Throws an
  error if it doesn't exist."
    (let ((fn (intern (format "doom-modeline-format--%s" key))))
      (when (functionp fn)
        `(:eval (,fn)))))

  (defun doom-set-modeline (key &optional default)
    "Set the modeline format. Does nothing if the modeline KEY doesn't exist. If
  DEFAULT is non-nil, set the default mode-line for all buffers."
    (let ((modeline (doom-modeline key)))
      (when modeline
        (setf (if default
                  (default-value 'mode-line-format)
                (buffer-local-value 'mode-line-format (current-buffer)))
              modeline))))

  ;; TODO /torgeir added this

  ;; Keep `+doom-modeline-current-window' up-to-date
  (defvar +doom-modeline-current-window (frame-selected-window))
  (defun +doom-modeline|set-selected-window (&rest _)
    "Sets `+doom-modeline-current-window' appropriately"
    (let ((win (frame-selected-window)))
      (unless (minibuffer-window-active-p win)
        (setq +doom-modeline-current-window win))))

  (add-hook 'window-configuration-change-hook #'+doom-modeline|set-selected-window)
  (add-hook 'focus-in-hook #'+doom-modeline|set-selected-window)
  (advice-add #'handle-switch-frame :after #'+doom-modeline|set-selected-window)
  (advice-add #'select-window :after #'+doom-modeline|set-selected-window)



  ;;
  ;; Variables
  ;;

  (defvar +doom-modeline-height 40
    "How tall the mode-line should be (only respected in GUI emacs).")

  (defvar +doom-modeline-bar-width 5
    "How wide the mode-line bar should be (only respected in GUI emacs).")

  (defvar +doom-modeline-vspc
    (propertize " " 'face 'variable-pitch)
    "TODO")

  ;; externs
  (defvar anzu--state nil)
  (defvar evil-mode nil)
  (defvar evil-state nil)
  (defvar evil-visual-selection nil)
  (defvar iedit-mode nil)
  (defvar all-the-icons-scale-factor)
  (defvar all-the-icons-default-adjust)


  ;;
  ;; Custom faces
  ;;

  (defgroup +doom-modeline nil
    ""
    :group 'doom)

  (defface doom-modeline-buffer-path
    '((t (:inherit mode-line-emphasis :bold t)))
    "Face used for the dirname part of the buffer path."
    :group '+doom-modeline)

  (defface doom-modeline-buffer-file
    '((t (:inherit mode-line-buffer-id)))
    "Face used for the filename part of the mode-line buffer path."
    :group '+doom-modeline)

  (defface doom-modeline-buffer-modified
    '((t (:inherit error :background nil :bold t)))
    "Face used for the 'unsaved' symbol in the mode-line."
    :group '+doom-modeline)

  (defface doom-modeline-buffer-major-mode
    '((t (:inherit mode-line-emphasis :bold t)))
    "Face used for the major-mode segment in the mode-line."
    :group '+doom-modeline)

  (defface doom-modeline-highlight
    '((t (:inherit mode-line-emphasis)))
    "Face for bright segments of the mode-line."
    :group '+doom-modeline)

  (defface doom-modeline-panel
    '((t (:inherit mode-line-highlight)))
    "Face for 'X out of Y' segments, such as `+doom-modeline--anzu', `+doom-modeline--evil-substitute' and
  `iedit'"
    :group '+doom-modeline)

  (defface doom-modeline-info
    `((t (:inherit success :bold t)))
    "Face for info-level messages in the modeline. Used by `*vc'."
    :group '+doom-modeline)

  (defface doom-modeline-warning
    `((t (:inherit warning :bold t)))
    "Face for warnings in the modeline. Used by `*flycheck'"
    :group '+doom-modeline)

  (defface doom-modeline-urgent
    `((t (:inherit error :bold t)))
    "Face for errors in the modeline. Used by `*flycheck'"
    :group '+doom-modeline)

  ;; Bar
  (defface doom-modeline-bar '((t (:inherit highlight :background "#268bd2")))
    "The face used for the left-most bar on the mode-line of an active window."
    :group '+doom-modeline)

  (defface doom-modeline-eldoc-bar '((t (:inherit shadow)))
    "The face used for the left-most bar on the mode-line when eldoc-eval is
  active."
    :group '+doom-modeline)

  (defface doom-modeline-inactive-bar '((t (:inherit warning :inverse-video t)))
    "The face used for the left-most bar on the mode-line of an inactive window."
    :group '+doom-modeline)


  ;;
  ;; Bootstrap
  ;;

  ;; Show version string for multi-version managers like rvm, rbenv, pyenv, etc.
  (defvar-local +doom-modeline-env-version nil)
  (defvar-local +doom-modeline-env-command nil)
  (add-hook! '(focus-in-hook find-file-hook) #'+doom-modeline|update-env)
  (defun +doom-modeline|update-env ()
    (when +doom-modeline-env-command
      (let* ((default-directory (doom-project-root))
             (s (shell-command-to-string +doom-modeline-env-command)))
        (setq +doom-modeline-env-version (if (string-match "[ \t\n\r]+\\'" s)
                                             (replace-match "" t t s)
                                           s)))))

  ;; Only support python and ruby for now

  ;; TODO torgeir
  (add-hook! 'python-mode-hook (setq +doom-modeline-env-command "python --version 2>&1 | cut -d' ' -f2"))
  (add-hook! 'ruby-mode-hook   (setq +doom-modeline-env-command "ruby   --version 2>&1 | cut -d' ' -f2"))


  ;;
  ;; Modeline helpers
  ;;

  (defsubst active ()
    (eq (selected-window) +doom-modeline-current-window))

  ;; Inspired from `powerline's `pl/make-xpm'.
  (def-memoized! +doom-modeline--make-xpm (color height width)
    "Create an XPM bitmap."
    (propertize
     " " 'display
     (let ((data (make-list height (make-list width 1)))
           (color (or color "None")))
       (create-image
        (concat
         (format "/* XPM */\nstatic char * percent[] = {\n\"%i %i 2 1\",\n\". c %s\",\n\"  c %s\","
                 (length (car data))
                 (length data)
                 color
                 color)
         (apply #'concat
                (cl-loop with idx = 0
                         with len = (length data)
                         for dl in data
                         do (cl-incf idx)
                         collect
                         (concat "\""
                                 (cl-loop for d in dl
                                          if (= d 0) collect (string-to-char " ")
                                          else collect (string-to-char "."))
                                 (if (eq idx len) "\"};" "\",\n")))))
        'xpm t :ascent 'center))))

  (defsubst +doom-modeline--buffer-file ()
    "Display the base of the current buffer's filename."
    (if buffer-file-name
        (file-name-nondirectory (or buffer-file-truename (file-truename buffer-file-name)))
      "%b"))

  (defsubst +doom-modeline--buffer-path ()
    "Displays the buffer's full path relative to the project root (includes the
  project root). Excludes the file basename. See `doom-buffer-name' for that."
    (when buffer-file-name
      (let ((buffer-path
             (file-relative-name (file-name-directory
                                  (or buffer-file-truename (file-truename buffer-file-name)))
                                 (doom-project-root))))
        (unless (equal buffer-path "./")
          (let ((max-length (truncate (* (window-body-width) 0.4))))
            (if (> (length buffer-path) max-length)
                (let ((path (nreverse (split-string buffer-path "/" t)))
                      (output ""))
                  (when (and path (equal "" (car path)))
                    (setq path (cdr path)))
                  (while (and path (<= (length output) (- max-length 4)))
                    (setq output (concat (car path) "/" output)
                          path (cdr path)))
                  (when path
                    (setq output (concat "../" output)))
                  (unless (string-suffix-p "/" output)
                    (setq output (concat output "/")))
                  output)
              buffer-path))))))


  ;;
  ;; Segments
  ;;

  (def-modeline-segment! buffer-project
    "Displays `doom-project-root'. This is for special buffers like the scratch
  buffer where knowing the current project directory is important."
    (let ((face (if (active) 'doom-modeline-buffer-path)))
      (concat (if (display-graphic-p) " ")
              (all-the-icons-octicon
               "file-directory"
               :face face
               :v-adjust -0.05
               :height 1.25)
              (propertize (concat " " (abbreviate-file-name (doom-project-root)))
                          'face face))))

  ;;
  (def-modeline-segment! buffer-info
    "Combined information about the current buffer, including the current working
  directory, the file name, and its state (modified, read-only or non-existent)."
    (let* ((all-the-icons-scale-factor 1.2)
           (modified-p (buffer-modified-p))
           (active (active))
           (faces (if modified-p 'doom-modeline-buffer-modified)))
      (concat (cond (buffer-read-only
                     (concat (all-the-icons-octicon
                              "lock"
                              :face 'doom-modeline-warning
                              :v-adjust -0.05)
                             " "))
                    (modified-p
                     (concat (all-the-icons-faicon
                              "floppy-o"
                              :face 'doom-modeline-buffer-modified
                              :v-adjust -0.0575)
                             " "))
                    ((and buffer-file-name
                          (not (file-exists-p buffer-file-name)))
                     (concat (all-the-icons-octicon
                              "circle-slash"
                              :face 'doom-modeline-urgent
                              :v-adjust -0.05)
                             " ")))
              (when-let (dir-path (+doom-modeline--buffer-path))
                (if-let (faces (or faces (if active 'doom-modeline-buffer-path)))
                    (propertize dir-path 'face `(:inherit ,faces))
                  dir-path))
              (when-let (file-path (+doom-modeline--buffer-file))
                (if-let (faces (or faces (if active 'doom-modeline-buffer-file)))
                    (propertize file-path 'face `(:inherit ,faces))
                  file-path)))))

  ;;
  (def-modeline-segment! buffer-info-simple
    "Return the current buffer name only, but with fontification."
    (propertize "%b" 'face (if (active) 'doom-modeline-buffer-file)))

  ;;
  (def-modeline-segment! buffer-encoding
    "Displays the encoding and eol style of the buffer the same way Atom does."
    (concat (let ((eol-type (coding-system-eol-type buffer-file-coding-system)))
              (cond ((eq eol-type 0) "LF  ")
                    ((eq eol-type 1) "CRLF  ")
                    ((eq eol-type 2) "CR  ")))
            (let* ((sys (coding-system-plist buffer-file-coding-system))
                   (sys-name (plist-get sys :name))
                   (sys-cat (plist-get sys :category)))
              (cond ((memq sys-cat '(coding-category-undecided coding-category-utf-8))
                     "UTF-8")
                    (t (upcase (symbol-name sys-name)))))
            "  "))

  ;;
  (def-modeline-segment! major-mode
    "The major mode, including process, environment and text-scale info."
    (propertize
     (concat (format-mode-line mode-name)
             (if (stringp mode-line-process) mode-line-process)
             (if +doom-modeline-env-version (concat " " +doom-modeline-env-version))
             (and (featurep 'face-remap)
                  (/= text-scale-mode-amount 0)
                  (format " (%+d)" text-scale-mode-amount)))
     'face (if (active) 'doom-modeline-buffer-major-mode)))

  ;;
  (def-modeline-segment! vcs
    "Displays the current branch, colored based on its state."
    (when vc-mode
      (let ((backend (when buffer-file-name (vc-backend buffer-file-name)))
            (state   (when buffer-file-name (vc-state buffer-file-name)))
            (face    'mode-line-inactive)
            (active  (active))
            (all-the-icons-scale-factor 1.0)
            (all-the-icons-default-adjust -0.1))
        (concat "  "
                (cond ((memq state '(edited added))
                       (if active (setq face 'doom-modeline-info))
                       (require 'all-the-icons)
                       (all-the-icons-octicon
                        "git-compare"
                        :face face
                        :height 1.2
                        :v-adjust -0.05))
                      ((eq state 'needs-merge)
                       (if active (setq face 'doom-modeline-info))
                       (all-the-icons-octicon "git-merge" :face face))
                      ((eq state 'needs-update)
                       (if active (setq face 'doom-modeline-warning))
                       (all-the-icons-octicon "arrow-down" :face face))
                      ((memq state '(removed conflict unregistered))
                       (if active (setq face 'doom-modeline-urgent))
                       (all-the-icons-octicon "alert" :face face))
                      (t
                       (if active (setq face 'font-lock-doc-face))
                       (all-the-icons-octicon
                        "git-compare"
                        :face face
                        :height 1.2
                        :v-adjust -0.05)))
                " "
                (propertize (substring vc-mode (+ (if (eq backend 'Hg) 2 3) 2))
                            'face (if active face))
                " "))))

  ;;
  (defun +doom-ml-icon (icon &optional text face voffset)
    "Displays an octicon ICON with FACE, followed by TEXT. Uses
  `all-the-icons-octicon' to fetch the icon."
    (concat
     (if vc-mode " " "  ")
     (when icon
       (concat
        (all-the-icons-material icon :face face :height 1.1 :v-adjust (or voffset -0.2))
        ;; (all-the-icons-octicon icon :face face :height 1.0 :v-adjust 0)
        (if text +doom-modeline-vspc)))
     (when text
       (propertize text 'face face))
     (if vc-mode "  " " ")))

  (def-modeline-segment! flycheck
    "Displays color-coded flycheck error status in the current buffer with pretty
  icons."
    (when (boundp 'flycheck-last-status-change)
      (pcase flycheck-last-status-change
        ('finished (if flycheck-current-errors
                       (let-alist (flycheck-count-errors flycheck-current-errors)
                         (let ((sum (+ (or .error 0) (or .warning 0))))
                           (+doom-ml-icon "do_not_disturb_alt"
                                          (number-to-string sum)
                                          (if .error 'doom-modeline-urgent 'doom-modeline-warning)
                                          -0.25)))
                     (+doom-ml-icon "check" nil 'doom-modeline-info)))
        ('running     (+doom-ml-icon "access_time" nil 'font-lock-doc-face -0.25))
        ('no-checker  (+doom-ml-icon "sim_card_alert" "-" 'font-lock-doc-face))
        ('errored     (+doom-ml-icon "sim_card_alert" "Error" 'doom-modeline-urgent))
        ('interrupted (+doom-ml-icon "pause" "Interrupted" 'font-lock-doc-face)))))
  ;; ('interrupted (+doom-ml-icon "x" "Interrupted" 'font-lock-doc-face)))))

  ;;
  (defsubst doom-column (pos)
    (save-excursion (goto-char pos)
                    (current-column)))

  (def-modeline-segment! selection-info
    "Information about the current selection, such as how many characters and
  lines are selected, or the NxM dimensions of a block selection."
    (when (and (active) (or mark-active (eq evil-state 'visual)))
      (let ((reg-beg (region-beginning))
            (reg-end (region-end)))
        (propertize
         (let ((lines (count-lines reg-beg (min (1+ reg-end) (point-max)))))
           (cond ((or (bound-and-true-p rectangle-mark-mode)
                      (eq 'block evil-visual-selection))
                  (let ((cols (abs (- (doom-column reg-end)
                                      (doom-column reg-beg)))))
                    (format "%dx%dB" lines cols)))
                 ((eq 'line evil-visual-selection)
                  (format "%dL" lines))
                 ((> lines 1)
                  (format "%dC %dL" (- (1+ reg-end) reg-beg) lines))
                 (t
                  (format "%dC" (- (1+ reg-end) reg-beg)))))
         'face 'doom-modeline-highlight))))


  ;;
  (defun +doom-modeline--macro-recording ()
    "Display current Emacs or evil macro being recorded."
    (when (and (active) (or defining-kbd-macro executing-kbd-macro))
      (let ((sep (propertize " " 'face 'doom-modeline-panel)))
        (concat sep
                (propertize (if (bound-and-true-p evil-this-macro)
                                (char-to-string evil-this-macro)
                              "Macro")
                            'face 'doom-modeline-panel)
                sep
                (all-the-icons-octicon "triangle-right"
                                       :face 'doom-modeline-panel
                                       :v-adjust -0.05)
                sep))))

  (defsubst +doom-modeline--anzu ()
    "Show the match index and total number thereof. Requires `anzu', also
  `evil-anzu' if using `evil-mode' for compatibility with `evil-search'."
    (when (and anzu--state (not iedit-mode))
      (propertize
       (let ((here anzu--current-position)
             (total anzu--total-matched))
         (cond ((eq anzu--state 'replace-query)
                (format " %d replace " total))
               ((eq anzu--state 'replace)
                (format " %d/%d " here total))
               (anzu--overflow-p
                (format " %s+ " total))
               (t
                (format " %s/%d " here total))))
       'face (if (active) 'doom-modeline-panel))))

  (defsubst +doom-modeline--evil-substitute ()
    "Show number of :s matches in real time."
    (when (and evil-mode
               (or (assq 'evil-ex-substitute evil-ex-active-highlights-alist)
                   (assq 'evil-ex-global-match evil-ex-active-highlights-alist)
                   (assq 'evil-ex-buffer-match evil-ex-active-highlights-alist)))
      (propertize
       (let ((range (if evil-ex-range
                        (cons (car evil-ex-range) (cadr evil-ex-range))
                      (cons (line-beginning-position) (line-end-position))))
             (pattern (car-safe (evil-delimited-arguments evil-ex-argument 2))))
         (if pattern
             (format " %s matches " (how-many pattern (car range) (cdr range)))
           " ... "))
       'face (if (active) 'doom-modeline-panel))))

  (defsubst +doom-modeline--iedit ()
    "Show the number of iedit regions matches + what match you're on."
    (when (and iedit-mode iedit-occurrences-overlays)
      (propertize
       (let ((this-oc (or (let ((inhibit-message t))
                            (iedit-find-current-occurrence-overlay))
                          (progn (iedit-prev-occurrence)
                                 (iedit-find-current-occurrence-overlay))))
             (length (length iedit-occurrences-overlays)))
         (format " %s/%d "
                 (if this-oc
                     (- length
                        (length (cdr
                                 (memq this-oc (sort (append iedit-occurrences-overlays (list))
                                                     (lambda (x y) (< (overlay-start x) (overlay-start y))))))))
                   "-")
                 length))
       'face (if (active) 'doom-modeline-panel))))

  (def-modeline-segment! matches
    "Displays: 1. the currently recording macro, 2. A current/total for the
  current search term (with anzu), 3. The number of substitutions being conducted
  with `evil-ex-substitute', and/or 4. The number of active `iedit' regions."
    (let ((meta (concat (+doom-modeline--macro-recording)
                        (+doom-modeline--anzu)
                        (+doom-modeline--evil-substitute)
                        (+doom-modeline--iedit))))
      (or (and (not (string= meta "")) meta)
          (if buffer-file-name " %I "))))

  ;; TODO Include other information
  (def-modeline-segment! media-info
    "Metadata regarding the current file, such as dimensions for images."
    (cond ((eq major-mode 'image-mode)
           (let ((size (image-size (image-get-display-property) :pixels)))
             (format "  %dx%d  " (car size) (cdr size))))))

  ;;
  (def-modeline-segment! eldoc
    "Display eldoc documentation in the mode-line while using the minibuffer (e.g.
  `eval-expression')."
    (bound-and-true-p str))

  ;; These bars regulate the height of the mode-line in GUI Emacs.
  (def-modeline-segment! bar
    (if (display-graphic-p)
        (+doom-modeline--make-xpm
         (face-background (if (active)
                              'doom-modeline-bar
                            'doom-modeline-inactive-bar)
                          nil t)
         +doom-modeline-height
         +doom-modeline-bar-width)
      ""))

  (def-modeline-segment! eldoc-bar
    "A differently colored bar, to signify an eldoc display."
    (if (display-graphic-p)
        (+doom-modeline--make-xpm
         (face-background 'doom-modeline-eldoc-bar nil t)
         +doom-modeline-height
         +doom-modeline-bar-width)
      ""))


  ;;
  ;; Mode lines
  ;;

  (def-modeline! main
    (bar matches " " buffer-info "  %l:%c %p  " selection-info)
    (buffer-encoding major-mode vcs flycheck))

  (def-modeline! eldoc
    (eldoc-bar " " eldoc)
    (media-info major-mode))

  (def-modeline! minimal
    (bar matches " " buffer-info)
    (media-info major-mode))

  (def-modeline! special
    (bar matches " " buffer-info-simple "  %l:%c %p  " selection-info)
    (buffer-encoding major-mode flycheck))

  (def-modeline! project
    (bar buffer-project)
    (major-mode))

  (def-modeline! media
    (bar " %b  ")
    (media-info major-mode))

  ;;
  (doom-set-modeline 'main t)

  ;; This scratch buffer is already created, and doesn't get a modeline. For the
  ;; love of Emacs, someone give the man a modeline!
  (with-current-buffer "*scratch*"
    (require 'all-the-icons)
    (doom-set-modeline 'main))


  ;;
  ;; Hooks
  ;;

  (defun +doom-modeline|set-special-modeline ()
    (doom-set-modeline 'special))

  (defun +doom-modeline|set-media-modeline ()
    (doom-set-modeline 'media))

  (add-hook 'org-src-mode-hook #'+doom-modeline|set-special-modeline)
  (add-hook 'image-mode-hook #'+doom-modeline|set-media-modeline)
  (add-hook 'circe-mode-hook #'+doom-modeline|set-special-modeline)

  (provide 't-doom-modeline)

#+END_SRC

** TESTING Org Date Hack
[[https://gist.github.com/fuxialexander/16e1ce6be518f6ba48e0acf92468627d][Hack]] to make scheduled/deadline faces look better 
#+BEGIN_SRC emacs-lisp
(setq org-ts-regexp-both-braket "\\([[<]\\)\\([0-9]\\{4\\}-[0-9]\\{2\\}-[0-9]\\{2\\} ?[^] 
\n>]*?\\)\\([]>]\\)")
  (defun *org-set-font-lock-defaults ()
    "Set font lock defaults for the current buffer."
    (let* ((em org-fontify-emphasized-text)
           (lk org-highlight-links)
           (org-font-lock-extra-keywords
            (list
             ;; Call the hook
             '(org-font-lock-hook)
             ;; Headlines
             `(,(if org-fontify-whole-heading-line
                    "^\\(\\**\\)\\(\\* \\)\\(.*\n?\\)"
                  "^\\(\\**\\)\\(\\* \\)\\(.*\\)")
               (1 (org-get-level-face 1))
               (2 (org-get-level-face 2))
               (3 (org-get-level-face 3)))
             ;; Table lines
             '("^[ \t]*\\(\\(|\\|\\+-[-+]\\).*\\S-\\)"
               (1 'org-table t))
             ;; Table internals
             '("^[ \t]*|\\(?:.*?|\\)? *\\(:?=[^|\n]*\\)" (1 'org-formula t))
             '("^[ \t]*| *\\([#*]\\) *|" (1 'org-formula t))
             '("^[ \t]*|\\( *\\([$!_^/]\\) *|.*\\)|" (1 'org-formula t))
             '("| *\\(<[lrc]?[0-9]*>\\)" (1 'org-formula t))
             ;; Drawers
             '(org-fontify-drawers)
             ;; Properties
             (list org-property-re
                   '(1 'org-special-keyword t)
                   '(3 'org-property-value t))
            ;; Special keywords
             (list (concat "\\<\\(DEADLINE: \\)" org-ts-regexp-both-braket)
                   '(1 'org-deadline-custom prepend)
                   '(2 'org-deadline-custom-braket prepend)
                   '(3 'org-deadline-custom prepend)
                   '(4 'org-deadline-custom-braket prepend))
             (list (concat "\\<\\(SCHEDULED: \\)" org-ts-regexp-both-braket)
                   '(1 'org-scheduled-custom prepend)
                   '(2 'org-scheduled-custom-braket prepend)
                   '(3 'org-scheduled-custom prepend)
                   '(4 'org-scheduled-custom-braket prepend))
             (list (concat "\\<\\(CLOSED: \\)" org-ts-regexp-both-braket)
                   '(1 'org-closed-custom prepend)
                   '(2 'org-closed-custom-braket prepend)
                   '(3 'org-closed-custom prepend)
                   '(4 'org-closed-custom-braket prepend))
             (list (concat "\\<" org-clock-string) '(0 'org-special-keyword prepend))
             ;; Link related fontification.
             '(org-activate-links)
             (when (memq 'tag lk) '(org-activate-tags (1 'org-tag prepend)))
             (when (memq 'radio lk) '(org-activate-target-links (1 'org-link t)))
             (when (memq 'date lk) '(org-activate-dates (0 'org-date t)))
             (when (memq 'footnote lk) '(org-activate-footnote-links))
             ;; Targets.
             (list org-any-target-regexp '(0 'org-target t))
             ;; Diary sexps.
             '("^&?%%(.*\\|<%%([^>\n]*?>" (0 'org-sexp-date t))
             ;; Macro
             '(org-fontify-macros)
             '(org-hide-wide-columns (0 nil append))
             ;; TODO keyword
             (list (format org-heading-keyword-regexp-format
                           org-todo-regexp)
                   '(2 (org-get-todo-face 2) t))
             ;; DONE
             (if org-fontify-done-headline
                 (list (format org-heading-keyword-regexp-format
                               (concat
                                "\\(?:"
                                (mapconcat 'regexp-quote org-done-keywords "\\|")
                                "\\)"))
                       '(2 'org-headline-done t))
               nil)
             ;; Priorities
             '(org-font-lock-add-priority-faces)
             ;; Tags
             '(org-font-lock-add-tag-faces)
             ;; Tags groups
             (when (and org-group-tags org-tag-groups-alist)
               (list (concat org-outline-regexp-bol ".+\\(:"
                             (regexp-opt (mapcar 'car org-tag-groups-alist))
                             ":\\).*$")
                     '(1 'org-tag-group prepend)))

             ;; Emphasis
             (when em '(org-do-emphasis-faces))
             ;; Checkboxes
             '("^[ \t]*\\(?:[-+*]\\|[0-9]+[.)]\\)[ \t]+\\(?:\\[@\\(?:start:\\)?[0-9]+\\][ \t]*\\)?\\(\\[[- X]\\]\\)"
               1 'org-checkbox prepend)
             (when (cdr (assq 'checkbox org-list-automatic-rules))
               '("\\[\\([0-9]*%\\)\\]\\|\\[\\([0-9]*\\)/\\([0-9]*\\)\\]"
                 (0 (org-get-checkbox-statistics-face) t)))
             ;; Description list items
             '("^[ \t]*[-+*][ \t]+\\(.*?[ \t]+::\\)\\([ \t]+\\|$\\)"
               1 'org-list-dt prepend)
             ;; ARCHIVEd headings
             (list (concat
                    org-outline-regexp-bol
                    "\\(.*:" org-archive-tag ":.*\\)")
                   '(1 'org-archived prepend))
             ;; Specials
             '(org-do-latex-and-related)
             '(org-fontify-entities)
             '(org-raise-scripts)
             ;; Code
             '(org-activate-code (1 'org-code t))
             ;; COMMENT
             (list (format
                    "^\\*+\\(?: +%s\\)?\\(?: +\\[#[A-Z0-9]\\]\\)? +\\(?9:%s\\)\\(?: \\|$\\)"
                    org-todo-regexp
                    org-comment-string)
                   '(9 'org-special-keyword t))
             ;; Blocks and meta lines
             '(org-fontify-meta-lines-and-blocks))))
      (setq org-font-lock-extra-keywords (delq nil org-font-lock-extra-keywords))
      (run-hooks 'org-font-lock-set-keywords-hook)
      ;; Now set the full font-lock-keywords
      (setq-local org-font-lock-keywords org-font-lock-extra-keywords)
      (setq-local font-lock-defaults
                  '(org-font-lock-keywords t nil nil backward-paragraph))
      (kill-local-variable 'font-lock-keywords)
      nil))
  (advice-add 'org-set-font-lock-defaults :override #'*org-set-font-lock-defaults)
  (defface org-deadline-custom '((t (:inherit 'default))) "org-deadline" :group 'org)
  (defface org-scheduled-custom '((t (:inherit 'default))) "org-schedule" :group 'org)
  (defface org-closed-custom '((t (:inherit 'default))) "org-close" :group 'org)
  (defface org-deadline-custom-braket '((t (:inherit 'default))) "org-deadline" :group 'org)
  (defface org-scheduled-custom-braket '((t (:inherit 'default))) "org-schedule" :group 'org)
  (defface org-closed-custom-braket '((t (:inherit 'default))) "org-close" :group 'org)


  (defun *org-eldoc-get-timestamp (str)
    "Return timestamp if on a headline or nil."
    (if str
        (concat
         (let ((deadline (org-entry-get (point) "DEADLINE" t))
               (scheduled (org-entry-get (point) "SCHEDULED" t))
               (closed (org-entry-get (point) "CLOSED" t))
               timestamp)
           (if deadline (setq timestamp (concat timestamp (propertize (substring deadline 1 -1) 'face 'org-deadline-custom) " ")))
           (if scheduled (setq timestamp (concat timestamp (propertize (substring scheduled 1 -1) 'face 'org-scheduled-custom) " ")))
           (if closed (setq timestamp (concat timestamp (propertize (substring closed 1 -1) 'face 'org-closed-custom) " ")))
           timestamp)
         str)
      nil))

  (advice-add 'org-eldoc-get-breadcrumb :filter-return #'*org-eldoc-get-timestamp)

  (defun *org-format-outline-path-normalize (str)
    (add-face-text-property
     0 (length str)
     '(:height 1) nil str)
    str)
  (advice-add 'org-format-outline-path :filter-return #'*org-format-outline-path-normalize)
#+END_SRC

** DISABLED Persistent Scratch
This has been giving me intermittent trouble. I'm disabling it for now in
favor of [[info:remember][remember]].
CLOSED: [2018-04-03 Tue 20:57]
Make the content of the scratch buffer [[https://github.com/Fanael/persistent-scratch][persist]] between settings
#+BEGIN_SRC emacs-lisp
  (use-package persistent-scratch
    :demand t
    :init
    (setq persistent-scratch-backup-directory (concat cpm-cache-dir "scratch-backups"))
    (setq persistent-scratch-save-file (concat cpm-cache-dir "persistent-scratch"))
    (setq persistent-scratch-autosave-mode 1)
    (setq persistent-scratch-autosave-interval 60)
    :config
    (ignore-errors (persistent-scratch-setup-default)))
#+END_SRC

** TESTING Framegroups
Yet another [[https://github.com/noctuid/framegroups.el][workspace management]] package
#+BEGIN_SRC emacs-lisp
  (use-package framegroups
    :ensure nil
    :commands (fg-switch-to-frame fg-create-frame fg-switch)
    :load-path "~/.emacs.d/.local/elisp/framegroups.el/"
    :config
    ;; enable `desktop-save-mode' for persistence
  ;; NOTE: It seems Emacs occasionally hangs when restoring a lot of frames with
  ;; desktop.el
    ;; (fg-desktop-setup)
    ;; (desktop-save-mode)

  ;; binding keys to switch to specific framegroups
  (general-define-key "C-c e" '(fg-switch "emacs"))
  (general-define-key "C-c p" '(fg-switch "prog"))
  ;; ...

  ;; default layouts for framegroups
  (defun cpm/my-framegroup-setup (name &rest _)
    "Set up default framegroup layouts."
    (interactive)
    (pcase name
      ;; emacs configuration
      ("emacs"
       (find-file "~/.emacs.d/config.org"))
      ;; programming projects
      ("prog"
       (find-file "~/bin"))
      ;; dotfiles
      ("dotfiles"
       (find-file "~/dotfiles/dotfiles.org"))
      ("PHIL232"
       (find-file "~/Dropbox/Work/projects/phil232/phil232_lecture_outline.org")
       (split-window-right)
       (find-file "~/Dropbox/Work/projects/phil232/content/notes/phil232_in-class_notes.org"))
      ("PHIL105"
       (find-file "~/Dropbox/Work/projects/phil105/content/slides/phil105_lecture_outline.org")
       (split-window-right)
       (find-file "~/Dropbox/Work/projects/phil105/content/slides/"))))

  (add-hook 'fg-create-hook #'cpm/my-framegroup-setup)

  ;; binding keys for the current framegroup
  (defmacro cpm/my-ff (file)
    "Wrapper for creating `find-file' commands."
    `(lambda () (interactive) (find-file ,file)))

  (defun cpm/my-framegroup-keybindings (name &rest _)
    (pcase name
      ("emacs"
       (global-set-key "C-c , i" (cpm/my-ff "~/.emacs.d/init.el")))
      ("PHIL 232"
       (global-set-key "C-c , s" (cpm/my-ff "schedule.org"))
       (global-set-key "C-c , f" #'projectile-find-file))
      ))

  (add-hook 'fg-after-switch-hook #'my-framegroup-keybindings))

  (defun cpm/load-phil105 ()
    (interactive)
    (new-frame)
    (fg-create-frame "PHIL105"))
#+END_SRC

** DISABLED Doc View Mode
CLOSED: [2018-02-03 Sat 10:44]
Disabled for now
#+begin_src emacs-lisp
  (use-package doc-view
    :config
      (fset 'doc-prev "\C-xo\C-x[\C-xo")
      (fset 'doc-next "\C-xo\C-x]\C-xo")
      (global-set-key (kbd "M-[") 'doc-prev)
      (global-set-key (kbd "M-]") 'doc-next)
      (evil-set-initial-state 'doc-view-mode 'normal)
      (evil-define-key 'normal doc-view-mode-map
        "/"  'spacemacs/doc-view-search-new-query
        "?"  'spacemacs/doc-view-search-new-query-backward
        "gg" 'doc-view-first-page
        "f"  'doc-view-autofit-mode
        "G"  'doc-view-last-page
        "gt" 'doc-view-goto-page
        "h"  'doc-view-previous-page
        "j"  'doc-view-next-line-or-next-page
        "k"  'doc-view-previous-line-or-previous-page
        "K"  'doc-view-kill-proc-and-buffer
        "l"  'doc-view-next-page
        "n"  'doc-view-search
        "N"  'doc-view-search-backward
        "-"  'doc-view-shrink
        "+"  'doc-view-enlarge
        (kbd "C-d") 'doc-view-scroll-up-or-next-page
        (kbd "C-k") 'doc-view-kill-proc
        (kbd "C-u") 'doc-view-scroll-down-or-previous-page)
      (progn
        (defun spacemacs/doc-view-search-new-query ()
          "Initiate a new query."
          (interactive)
          (doc-view-search 'newquery))

        (defun spacemacs/doc-view-search-new-query-backward ()
          "Initiate a new query."
          (interactive)
          (doc-view-search 'newquery t))

  (defcustom doc-view-autofit-timer-start 1.0
  "Initial value (seconds) for the timer that delays the fitting when
  `doc-view-autofit-fit' is called (Which is when a window
  configuration change occurs and a document needs to be fitted)."
  :type 'number
  :group 'doc-view)

  (defcustom doc-view-autofit-timer-inc 0.02
  "Value to increase (seconds) the timer (see `doc-view-autofit-timer-start')
  by, if there is another window configuration change occuring, before
  it runs out."
  :type 'number
  :group 'doc-view)

  (defcustom doc-view-autofit-default-fit 'width
  "The fitting type initially used when mode is enabled.
  Valid values are: width, height, page."
  :type 'symbol
  :group 'doc-view)

  (defvar doc-view-autofit-mode-map
  (let ((map (make-sparse-keymap)))
      (define-key map (kbd "C-c W") 'doc-view-autofit-width)
      (define-key map (kbd "C-c H") 'doc-view-autofit-height)
      (define-key map (kbd "C-c P") 'doc-view-autofit-page)
      map)
  "Keymap used by `doc-view-autofit-mode'.")

  (defun doc-view-autofit-set (type)
  "Set autofitting to TYPE for current buffer."
  (when doc-view-autofit-mode
      (setq doc-view-autofit-type type)
      (doc-view-autofit-fit)))

  (defun doc-view-autofit-width ()
  "Set autofitting to width for current buffer."
  (interactive) (doc-view-autofit-set 'width))

  (defun doc-view-autofit-height ()
  "Set autofitting to height for current buffer."
  (interactive) (doc-view-autofit-set 'height))

  (defun doc-view-autofit-page ()
  "Set autofitting to page for current buffer."
  (interactive) (doc-view-autofit-set 'page))

  (defun doc-view-autofit-fit ()
  "Fits the document in the selected window's buffer
  delayed with a timer, so multiple calls in succession
  don't cause as much overhead."
  (lexical-let
      ((window (selected-window)))
      (if (equal doc-view-autofit-timer nil)
          (setq doc-view-autofit-timer
              (run-with-timer
              doc-view-autofit-timer-start nil
              (lambda ()
                  (if (window-live-p window)
                      (save-selected-window
                      (select-window window)
                      (cancel-timer doc-view-autofit-timer)
                      (setq doc-view-autofit-timer nil)
                      (cond
                          ((equal 'width doc-view-autofit-type)
                          (doc-view-fit-width-to-window))
                          ((equal 'height doc-view-autofit-type)
                          (doc-view-fit-height-to-window))
                          ((equal 'page doc-view-autofit-type)
                          (doc-view-fit-page-to-window))))))))
      (timer-inc-time doc-view-autofit-timer doc-view-autofit-timer-inc))))

  (define-minor-mode doc-view-autofit-mode
  "Minor mode for automatic (timer based) fitting in DocView."
  :lighter " AFit" :keymap doc-view-autofit-mode-map :group 'doc-view
  (when doc-view-autofit-mode
      (set (make-local-variable 'doc-view-autofit-type)
          doc-view-autofit-default-fit)
      (set (make-local-variable 'doc-view-autofit-timer) nil)
      (add-hook 'window-configuration-change-hook
              'doc-view-autofit-fit nil t)
      (doc-view-autofit-fit))
  (when (not doc-view-autofit-mode)
      (remove-hook 'window-configuration-change-hook
                  'doc-view-autofit-fit t)
      (when doc-view-autofit-timer
      (cancel-timer doc-view-autofit-timer)
      (setq doc-view-autofit-timer nil))
      (setq doc-view-autofit-type nil)))

  (add-hook 'doc-view-mode-hook 'doc-view-autofit-mode)
  ;; reload when file changes
  (add-hook 'doc-view-mode-hook 'auto-revert-mode)
  ;; continuous scroll mode
  (setq doc-view-continuous t)
  ))
#+end_src

** Org Super agenda settings
#+BEGIN_SRC emacs-lisp :tangle no
(use-package org-super-agenda
  :commands super-jump-to-org-agenda
  :preface
  (defun super-jump-to-org-agenda ()
    (interactive)
    (let ((org-super-agenda-groups
           '((:name "ACTION"
                    :time-grid t
                    :todo "NEXT"
                    :order 1)
             (:name "To Read"
                    :todo "TO-READ"
                    :order 2)
             (:name "In Progress"
                    :todo "INPROGRESS"
                    :order 7)
             (:todo "WAITING" :order 8)
             (:todo ("FIXME" "REVISE")
                    :order 3)
             (:priority<= "B" :order 1))))
      (org-agenda nil "a")))
  :config
  (org-super-agenda-mode))
#+END_SRC

** DISABLED Doom Modeline
CLOSED: [2018-03-15 Thu 15:09]
The Doom modeline
#+BEGIN_SRC emacs-lisp
(require 'evil)
(require 'projectile)

(use-package powerline) 

;; fix error on byte-compile
(eval-when-compile
(defvar mode-line-height 30
  "How tall the mode-line should be. This is only respected in GUI emacs."))

;; Load powerline only when uncompiled, in order to generate the xpm bitmaps for
;; the mode-line. This is the tall blue bar on the left of the mode-line.
;; NOTE Compile this file for a faster startup!
(eval-when-compile (require 'powerline))
;; FIXME Don't hardcode colors in

(defvar mode-line-bar          (eval-when-compile (pl/percent-xpm mode-line-height 100 0 100 0 3 "#268bd2" nil)))
(defvar mode-line-eldoc-bar    (eval-when-compile (pl/percent-xpm mode-line-height 100 0 100 0 3 "#B3EF00" nil)))
(defvar mode-line-inactive-bar (eval-when-compile (pl/percent-xpm mode-line-height 100 0 100 0 3 nil nil)))

;; Custom faces
(defface mode-line-is-modified nil
  "Face for mode-line modified symbol")

(defface mode-line-2 nil
  "The alternate color for mode-line text.")

(defface mode-line-highlight nil
  "Face for bright segments of the mode-line.")

(defface mode-line-count-face nil
  "Face for anzu/evil-substitute/evil-search number-of-matches display.")

;; Git/VCS segment faces
(defface mode-line-vcs-info '((t (:inherit warning)))
  "")
(defface mode-line-vcs-warning '((t (:inherit warning)))
  "")

;; Flycheck segment faces
(defface doom-flycheck-error '((t (:inherit error)))
  "Face for flycheck error feedback in the modeline.")
(defface doom-flycheck-warning '((t (:inherit warning)))
  "Face for flycheck warning feedback in the modeline.")


;;
;; Functions
;;

(defun doom-ml-fix-unicode (font &rest chars)
  "Display certain unicode characters in a specific font.

e.g. (doom-fix-unicode \"DejaVu Sans\" ?⚠ ?★ ?λ)"
  (declare (indent 1))
  (mapc (lambda (x) (set-fontset-font
                t (cons x x)
                (cond ((fontp font)
                       font)
                      ((listp font)
                       (font-spec :family (car font) :size (nth 1 font)))
                      ((stringp font)
                       (font-spec :family font))
                      (t (error "FONT is an invalid type: %s" font)))))
        chars))

(defun doom-ml-project-root (&optional strict-p)
  "Get the path to the root of your project."
  (let (projectile-require-project-root strict-p)
    (projectile-project-root)))

(defun doom-ml-flycheck-count (state)
  "Return flycheck information for the given error type STATE."
  (when (flycheck-has-current-errors-p state)
    (if (eq 'running flycheck-last-status-change)
        "?"
      (cdr-safe (assq state (flycheck-count-errors flycheck-current-errors))))))

;; pyenv/rbenv version segment
(defvar doom-ml-env-version-hook '()
  "Hook that runs whenever the environment version changes (e.g. rbenv/pyenv)")

(defun doom-ml|env-update ()
  (when doom-ml--env-command
    (let ((default-directory (doom-ml-project-root)))
      (let ((s (shell-command-to-string doom-ml--env-command)))
        (setq doom-ml--env-version (if (string-match "[ \t\n\r]+\\'" s)
                                    (replace-match "" t t s)
                                  s))
        (run-hook-with-args 'doom-ml-env-version-hook doom-ml--env-version)))))

(defmacro def-version-cmd! (modes command)
  "Define a COMMAND for MODE that will set `doom-ml--env-command' when that mode is
activated, which should return the version number of the current environment. It is used
by `doom-ml|env-update' to display a version number in the modeline. For instance:

  (def-version-cmd! ruby-mode \"ruby --version | cut -d' ' -f2\")

This will display the ruby version in the modeline in ruby-mode buffers. It is cached the
first time."
  (add-hook! (focus-in find-file) 'doom-ml|env-update)
  `(add-hook! ,modes (setq doom-ml--env-command ,command)))

(def-version-cmd! python-mode "python --version 2>&1 | cut -d' ' -f2")
(def-version-cmd! ruby-mode "ruby --version | cut -d' ' -f2")


;;
;; Initialization
;;

;; Where (py|rb)env version strings will be stored
(defvar-local doom-ml--env-version nil)
(defvar-local doom-ml--env-command nil)

;; Make certain unicode glyphs bigger for the mode-line.
;; FIXME Replace with all-the-icons?
(doom-ml-fix-unicode '("DejaVuSansMono Nerd Font" 15) ?✱) ;; modified symbol
(let ((font "DejaVu Sans Mono for Powerline"))
  (doom-ml-fix-unicode (list font 12) ?)  ;; git symbol
  (doom-ml-fix-unicode (list font 16) ?∄)  ;; non-existent-file symbol
  (doom-ml-fix-unicode (list font 15) ?)) ;; read-only symbol

;; So the mode-line can keep track of "the current window"
(defvar mode-line-selected-window nil)
(defun doom|set-selected-window (&rest _)
  (let ((window (frame-selected-window)))
    (unless (minibuffer-window-active-p window)
      (setq mode-line-selected-window window))))
(add-hook 'window-configuration-change-hook #'doom|set-selected-window)
(add-hook 'focus-in-hook #'doom|set-selected-window)
(advice-add 'select-window :after 'doom|set-selected-window)
(advice-add 'select-frame  :after 'doom|set-selected-window)


;;
;; Mode-line segments
;;

(defun *buffer-path ()
  "Displays the buffer's full path relative to the project root (includes the
project root). Excludes the file basename. See `*buffer-name' for that."
  (when buffer-file-name
    (propertize
     (f-dirname
      (let ((buffer-path (file-relative-name buffer-file-name (doom-ml-project-root)))
            (max-length (truncate (/ (window-body-width) 1.75))))
        (concat (projectile-project-name) "/"
                (if (> (length buffer-path) max-length)
                    (let ((path (reverse (split-string buffer-path "/" t)))
                          (output ""))
                      (when (and path (equal "" (car path)))
                        (setq path (cdr path)))
                      (while (and path (<= (length output) (- max-length 4)))
                        (setq output (concat (car path) "/" output))
                        (setq path (cdr path)))
                      (when path
                        (setq output (concat "../" output)))
                      (when (string-suffix-p "/" output)
                        (setq output (substring output 0 -1)))
                      output)
                  buffer-path))))
     'face (if active 'mode-line-2))))

(defun *buffer-name ()
  "The buffer's base name or id."
  ;; FIXME Don't show uniquify tags
  (s-trim-left (format-mode-line "%b")))

(defun *buffer-pwd ()
  "Displays `default-directory', for special buffers like the scratch buffer."
  (propertize
   (concat "[" (abbreviate-file-name default-directory) "]")
   'face 'mode-line-2))

(defun *buffer-state ()
  "Displays symbols representing the buffer's state
(non-existent/modified/read-only)"
  (when buffer-file-name
    (propertize
     (concat (if (not (file-exists-p buffer-file-name))
                 "∄"
               (if (buffer-modified-p) "✱"))
             (if buffer-read-only ""))
     'face 'mode-line-is-modified)))

(defun *buffer-encoding-abbrev ()
  "The line ending convention used in the buffer."
  (if (memq buffer-file-coding-system '(utf-8 utf-8-unix))
      ""
    (symbol-name buffer-file-coding-system)))

(defun *major-mode ()
  "The major mode, including process, environment and text-scale info."
  (concat (format-mode-line mode-name)
          (if (stringp mode-line-process) mode-line-process)
          (if doom-ml--env-version (concat " " doom-ml--env-version))
          (and (featurep 'face-remap)
               (/= text-scale-mode-amount 0)
               (format " (%+d)" text-scale-mode-amount))))

(defun *vc ()
  "Displays the current branch, colored based on its state."
  (when vc-mode
    (let ((backend (concat "  " (substring vc-mode (+ 2 (length (symbol-name (vc-backend buffer-file-name)))))))
          (face (let ((state (vc-state buffer-file-name)))
                  (cond ((memq state '(edited added))
                         'mode-line-vcs-info)
                        ((memq state '(removed needs-merge needs-update conflict removed unregistered))
                         'mode-line-vcs-warning)))))
      (if active
          (propertize backend 'face face)
        backend))))

(defvar-local doom--flycheck-err-cache nil "")
(defvar-local doom--flycheck-cache nil "")
(defun *flycheck ()
  "Persistent and cached flycheck indicators in the mode-line."
  (when (and (featurep 'flycheck)
             flycheck-mode
             (or flycheck-current-errors
                 (eq 'running flycheck-last-status-change)))
    (or (and (or (eq doom--flycheck-err-cache doom--flycheck-cache)
                 (memq flycheck-last-status-change '(running not-checked)))
             doom--flycheck-cache)
        (and (setq doom--flycheck-err-cache flycheck-current-errors)
             (setq doom--flycheck-cache
                   (let ((fe (doom-ml-flycheck-count 'error))
                         (fw (doom-ml-flycheck-count 'warning)))
                     (concat
                      (if fe (propertize (format " •%d " fe)
                                         'face (if active
                                                   'doom-flycheck-error
                                                 'mode-line)))
                      (if fw (propertize (format " •%d " fw)
                                         'face (if active
                                                   'doom-flycheck-warning
                                                 'mode-line))))))))))

(defun *selection-info ()
  "Information about the current selection, such as how many characters and
lines are selected, or the NxM dimensions of a block selection."
  (when (and active (evil-visual-state-p))
    (propertize
     (let ((reg-beg (region-beginning))
           (reg-end (region-end))
           (evil (eq 'visual evil-state)))
       (let ((lines (count-lines reg-beg (min (1+ reg-end) (point-max))))
             (chars (- (1+ reg-end) reg-beg))
             (cols (1+ (abs (- (evil-column reg-end)
                               (evil-column reg-beg))))))
         (cond
          ;; rectangle selection
          ((or (bound-and-true-p rectangle-mark-mode)
               (and evil (eq 'block evil-visual-selection)))
           (format " %dx%dB " lines (if evil cols (1- cols))))
          ;; line selection
          ((or (> lines 1) (eq 'line evil-visual-selection))
           (if (and (eq evil-state 'visual) (eq evil-this-type 'line))
               (format " %dL " lines)
             (format " %dC %dL " chars lines)))
          (t (format " %dC " (if evil chars (1- chars)))))))
     'face 'mode-line-highlight)))

(defun *macro-recording ()
  "Display current macro being recorded."
  (when (and active defining-kbd-macro)
    (propertize
     (format " %s ▶ " (char-to-string evil-this-macro))
     'face 'mode-line-highlight)))

(make-variable-buffer-local 'anzu--state)
(defun *anzu ()
  "Show the current match number and the total number of matches. Requires anzu
to be enabled."
  (when (and (featurep 'evil) (featurep 'evil-anzu) (evil-ex-hl-active-p 'evil-ex-search))
    (propertize
     (format " %s/%d%s "
             anzu--current-position anzu--total-matched
             (if anzu--overflow-p "+" ""))
     'face (if active 'mode-line-count-face))))

(defun *evil-substitute ()
  "Show number of :s matches in real time."
  (when (and (featurep 'evil) (evil-ex-p) (evil-ex-hl-active-p 'evil-ex-substitute))
    (propertize
     (let ((range (if evil-ex-range
                      (cons (car evil-ex-range) (cadr evil-ex-range))
                    (cons (line-beginning-position) (line-end-position))))
           (pattern (car-safe (evil-delimited-arguments evil-ex-argument 2))))
       (if pattern
           (format " %s matches "
                   (count-matches pattern (car range) (cdr range))
                   evil-ex-argument)
         " ... "))
     'face (if active 'mode-line-count-face))))

(defun *iedit ()
  "Show the number of iedit regions matches + what match you're on."
  (when (bound-and-true-p iedit-mode)
    (propertize
     (let ((this-oc (let (message-log-max) (iedit-find-current-occurrence-overlay)))
           (length (or (ignore-errors (length iedit-occurrences-overlays)) 0)))
       (format
        " %s/%s "
        (save-excursion
          (unless this-oc
            (iedit-prev-occurrence)
            (setq this-oc (iedit-find-current-occurrence-overlay)))
          (if this-oc
              ;; NOTE: Not terribly reliable
              (- length (-elem-index this-oc iedit-occurrences-overlays))
            "-"))
        length))
     'face (if active 'mode-line-count-face))))

(defun *buffer-position ()
  "A more vim-like buffer position."
  (let ((start (window-start))
        (end (window-end))
        (pend (point-max)))
    (if (and (= start 1)
             (= end pend))
        ":All"
      (cond ((= start 1) ":Top")
            ((= end pend) ":Bot")
            (t (format ":%d%%%%" (/ end 0.01 pend)))))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defun doom-mode-line (&optional id)
  `(:eval
    (let* ((active (eq (selected-window) mode-line-selected-window))
           (lhs (list (propertize " " 'display (if active mode-line-bar mode-line-inactive-bar))
                      (*flycheck)
                      (*macro-recording)
                      (*selection-info)
                      (*anzu)
                      (*evil-substitute)
                      (*iedit)
                      " "
                      (*buffer-path)
                      (*buffer-name)
                      " "
                      (*buffer-state)
                      ,(if (eq id 'scratch) '(*buffer-pwd))))
           (rhs (list (*buffer-encoding-abbrev)
                      (*vc)
                      "  " (*major-mode) "  "
                      (propertize
                       (concat "(%l,%c) " (*buffer-position))
                       'face (if active 'mode-line-2))))
           (middle (propertize
                    " " 'display `((space :align-to (- (+ right right-fringe right-margin)
                                                       ,(1+ (string-width (format-mode-line rhs)))))))))
      (with-demoted-errors "Mode-line error: %s" (list lhs middle rhs)))))

(setq-default mode-line-format (doom-mode-line))

#+END_SRC

** DISABLED Doom Modeline
CLOSED: [2018-03-15 Thu 15:09]
The Doom modeline
#+BEGIN_SRC emacs-lisp
(require 'evil)
(require 'projectile)

(use-package powerline) 

;; fix error on byte-compile
(eval-when-compile
(defvar mode-line-height 30
  "How tall the mode-line should be. This is only respected in GUI emacs."))

;; Load powerline only when uncompiled, in order to generate the xpm bitmaps for
;; the mode-line. This is the tall blue bar on the left of the mode-line.
;; NOTE Compile this file for a faster startup!
(eval-when-compile (require 'powerline))
;; FIXME Don't hardcode colors in

(defvar mode-line-bar          (eval-when-compile (pl/percent-xpm mode-line-height 100 0 100 0 3 "#268bd2" nil)))
(defvar mode-line-eldoc-bar    (eval-when-compile (pl/percent-xpm mode-line-height 100 0 100 0 3 "#B3EF00" nil)))
(defvar mode-line-inactive-bar (eval-when-compile (pl/percent-xpm mode-line-height 100 0 100 0 3 nil nil)))

;; Custom faces
(defface mode-line-is-modified nil
  "Face for mode-line modified symbol")

(defface mode-line-2 nil
  "The alternate color for mode-line text.")

(defface mode-line-highlight nil
  "Face for bright segments of the mode-line.")

(defface mode-line-count-face nil
  "Face for anzu/evil-substitute/evil-search number-of-matches display.")

;; Git/VCS segment faces
(defface mode-line-vcs-info '((t (:inherit warning)))
  "")
(defface mode-line-vcs-warning '((t (:inherit warning)))
  "")

;; Flycheck segment faces
(defface doom-flycheck-error '((t (:inherit error)))
  "Face for flycheck error feedback in the modeline.")
(defface doom-flycheck-warning '((t (:inherit warning)))
  "Face for flycheck warning feedback in the modeline.")


;;
;; Functions
;;

(defun doom-ml-fix-unicode (font &rest chars)
  "Display certain unicode characters in a specific font.

e.g. (doom-fix-unicode \"DejaVu Sans\" ?⚠ ?★ ?λ)"
  (declare (indent 1))
  (mapc (lambda (x) (set-fontset-font
                t (cons x x)
                (cond ((fontp font)
                       font)
                      ((listp font)
                       (font-spec :family (car font) :size (nth 1 font)))
                      ((stringp font)
                       (font-spec :family font))
                      (t (error "FONT is an invalid type: %s" font)))))
        chars))

(defun doom-ml-project-root (&optional strict-p)
  "Get the path to the root of your project."
  (let (projectile-require-project-root strict-p)
    (projectile-project-root)))

(defun doom-ml-flycheck-count (state)
  "Return flycheck information for the given error type STATE."
  (when (flycheck-has-current-errors-p state)
    (if (eq 'running flycheck-last-status-change)
        "?"
      (cdr-safe (assq state (flycheck-count-errors flycheck-current-errors))))))

;; pyenv/rbenv version segment
(defvar doom-ml-env-version-hook '()
  "Hook that runs whenever the environment version changes (e.g. rbenv/pyenv)")

(defun doom-ml|env-update ()
  (when doom-ml--env-command
    (let ((default-directory (doom-ml-project-root)))
      (let ((s (shell-command-to-string doom-ml--env-command)))
        (setq doom-ml--env-version (if (string-match "[ \t\n\r]+\\'" s)
                                    (replace-match "" t t s)
                                  s))
        (run-hook-with-args 'doom-ml-env-version-hook doom-ml--env-version)))))

(defmacro def-version-cmd! (modes command)
  "Define a COMMAND for MODE that will set `doom-ml--env-command' when that mode is
activated, which should return the version number of the current environment. It is used
by `doom-ml|env-update' to display a version number in the modeline. For instance:

  (def-version-cmd! ruby-mode \"ruby --version | cut -d' ' -f2\")

This will display the ruby version in the modeline in ruby-mode buffers. It is cached the
first time."
  (add-hook! (focus-in find-file) 'doom-ml|env-update)
  `(add-hook! ,modes (setq doom-ml--env-command ,command)))

(def-version-cmd! python-mode "python --version 2>&1 | cut -d' ' -f2")
(def-version-cmd! ruby-mode "ruby --version | cut -d' ' -f2")


;;
;; Initialization
;;

;; Where (py|rb)env version strings will be stored
(defvar-local doom-ml--env-version nil)
(defvar-local doom-ml--env-command nil)

;; Make certain unicode glyphs bigger for the mode-line.
;; FIXME Replace with all-the-icons?
(doom-ml-fix-unicode '("DejaVuSansMono Nerd Font" 15) ?✱) ;; modified symbol
(let ((font "DejaVu Sans Mono for Powerline"))
  (doom-ml-fix-unicode (list font 12) ?)  ;; git symbol
  (doom-ml-fix-unicode (list font 16) ?∄)  ;; non-existent-file symbol
  (doom-ml-fix-unicode (list font 15) ?)) ;; read-only symbol

;; So the mode-line can keep track of "the current window"
(defvar mode-line-selected-window nil)
(defun doom|set-selected-window (&rest _)
  (let ((window (frame-selected-window)))
    (unless (minibuffer-window-active-p window)
      (setq mode-line-selected-window window))))
(add-hook 'window-configuration-change-hook #'doom|set-selected-window)
(add-hook 'focus-in-hook #'doom|set-selected-window)
(advice-add 'select-window :after 'doom|set-selected-window)
(advice-add 'select-frame  :after 'doom|set-selected-window)


;;
;; Mode-line segments
;;

(defun *buffer-path ()
  "Displays the buffer's full path relative to the project root (includes the
project root). Excludes the file basename. See `*buffer-name' for that."
  (when buffer-file-name
    (propertize
     (f-dirname
      (let ((buffer-path (file-relative-name buffer-file-name (doom-ml-project-root)))
            (max-length (truncate (/ (window-body-width) 1.75))))
        (concat (projectile-project-name) "/"
                (if (> (length buffer-path) max-length)
                    (let ((path (reverse (split-string buffer-path "/" t)))
                          (output ""))
                      (when (and path (equal "" (car path)))
                        (setq path (cdr path)))
                      (while (and path (<= (length output) (- max-length 4)))
                        (setq output (concat (car path) "/" output))
                        (setq path (cdr path)))
                      (when path
                        (setq output (concat "../" output)))
                      (when (string-suffix-p "/" output)
                        (setq output (substring output 0 -1)))
                      output)
                  buffer-path))))
     'face (if active 'mode-line-2))))

(defun *buffer-name ()
  "The buffer's base name or id."
  ;; FIXME Don't show uniquify tags
  (s-trim-left (format-mode-line "%b")))

(defun *buffer-pwd ()
  "Displays `default-directory', for special buffers like the scratch buffer."
  (propertize
   (concat "[" (abbreviate-file-name default-directory) "]")
   'face 'mode-line-2))

(defun *buffer-state ()
  "Displays symbols representing the buffer's state
(non-existent/modified/read-only)"
  (when buffer-file-name
    (propertize
     (concat (if (not (file-exists-p buffer-file-name))
                 "∄"
               (if (buffer-modified-p) "✱"))
             (if buffer-read-only ""))
     'face 'mode-line-is-modified)))

(defun *buffer-encoding-abbrev ()
  "The line ending convention used in the buffer."
  (if (memq buffer-file-coding-system '(utf-8 utf-8-unix))
      ""
    (symbol-name buffer-file-coding-system)))

(defun *major-mode ()
  "The major mode, including process, environment and text-scale info."
  (concat (format-mode-line mode-name)
          (if (stringp mode-line-process) mode-line-process)
          (if doom-ml--env-version (concat " " doom-ml--env-version))
          (and (featurep 'face-remap)
               (/= text-scale-mode-amount 0)
               (format " (%+d)" text-scale-mode-amount))))

(defun *vc ()
  "Displays the current branch, colored based on its state."
  (when vc-mode
    (let ((backend (concat "  " (substring vc-mode (+ 2 (length (symbol-name (vc-backend buffer-file-name)))))))
          (face (let ((state (vc-state buffer-file-name)))
                  (cond ((memq state '(edited added))
                         'mode-line-vcs-info)
                        ((memq state '(removed needs-merge needs-update conflict removed unregistered))
                         'mode-line-vcs-warning)))))
      (if active
          (propertize backend 'face face)
        backend))))

(defvar-local doom--flycheck-err-cache nil "")
(defvar-local doom--flycheck-cache nil "")
(defun *flycheck ()
  "Persistent and cached flycheck indicators in the mode-line."
  (when (and (featurep 'flycheck)
             flycheck-mode
             (or flycheck-current-errors
                 (eq 'running flycheck-last-status-change)))
    (or (and (or (eq doom--flycheck-err-cache doom--flycheck-cache)
                 (memq flycheck-last-status-change '(running not-checked)))
             doom--flycheck-cache)
        (and (setq doom--flycheck-err-cache flycheck-current-errors)
             (setq doom--flycheck-cache
                   (let ((fe (doom-ml-flycheck-count 'error))
                         (fw (doom-ml-flycheck-count 'warning)))
                     (concat
                      (if fe (propertize (format " •%d " fe)
                                         'face (if active
                                                   'doom-flycheck-error
                                                 'mode-line)))
                      (if fw (propertize (format " •%d " fw)
                                         'face (if active
                                                   'doom-flycheck-warning
                                                 'mode-line))))))))))

(defun *selection-info ()
  "Information about the current selection, such as how many characters and
lines are selected, or the NxM dimensions of a block selection."
  (when (and active (evil-visual-state-p))
    (propertize
     (let ((reg-beg (region-beginning))
           (reg-end (region-end))
           (evil (eq 'visual evil-state)))
       (let ((lines (count-lines reg-beg (min (1+ reg-end) (point-max))))
             (chars (- (1+ reg-end) reg-beg))
             (cols (1+ (abs (- (evil-column reg-end)
                               (evil-column reg-beg))))))
         (cond
          ;; rectangle selection
          ((or (bound-and-true-p rectangle-mark-mode)
               (and evil (eq 'block evil-visual-selection)))
           (format " %dx%dB " lines (if evil cols (1- cols))))
          ;; line selection
          ((or (> lines 1) (eq 'line evil-visual-selection))
           (if (and (eq evil-state 'visual) (eq evil-this-type 'line))
               (format " %dL " lines)
             (format " %dC %dL " chars lines)))
          (t (format " %dC " (if evil chars (1- chars)))))))
     'face 'mode-line-highlight)))

(defun *macro-recording ()
  "Display current macro being recorded."
  (when (and active defining-kbd-macro)
    (propertize
     (format " %s ▶ " (char-to-string evil-this-macro))
     'face 'mode-line-highlight)))

(make-variable-buffer-local 'anzu--state)
(defun *anzu ()
  "Show the current match number and the total number of matches. Requires anzu
to be enabled."
  (when (and (featurep 'evil) (featurep 'evil-anzu) (evil-ex-hl-active-p 'evil-ex-search))
    (propertize
     (format " %s/%d%s "
             anzu--current-position anzu--total-matched
             (if anzu--overflow-p "+" ""))
     'face (if active 'mode-line-count-face))))

(defun *evil-substitute ()
  "Show number of :s matches in real time."
  (when (and (featurep 'evil) (evil-ex-p) (evil-ex-hl-active-p 'evil-ex-substitute))
    (propertize
     (let ((range (if evil-ex-range
                      (cons (car evil-ex-range) (cadr evil-ex-range))
                    (cons (line-beginning-position) (line-end-position))))
           (pattern (car-safe (evil-delimited-arguments evil-ex-argument 2))))
       (if pattern
           (format " %s matches "
                   (count-matches pattern (car range) (cdr range))
                   evil-ex-argument)
         " ... "))
     'face (if active 'mode-line-count-face))))

(defun *iedit ()
  "Show the number of iedit regions matches + what match you're on."
  (when (bound-and-true-p iedit-mode)
    (propertize
     (let ((this-oc (let (message-log-max) (iedit-find-current-occurrence-overlay)))
           (length (or (ignore-errors (length iedit-occurrences-overlays)) 0)))
       (format
        " %s/%s "
        (save-excursion
          (unless this-oc
            (iedit-prev-occurrence)
            (setq this-oc (iedit-find-current-occurrence-overlay)))
          (if this-oc
              ;; NOTE: Not terribly reliable
              (- length (-elem-index this-oc iedit-occurrences-overlays))
            "-"))
        length))
     'face (if active 'mode-line-count-face))))

(defun *buffer-position ()
  "A more vim-like buffer position."
  (let ((start (window-start))
        (end (window-end))
        (pend (point-max)))
    (if (and (= start 1)
             (= end pend))
        ":All"
      (cond ((= start 1) ":Top")
            ((= end pend) ":Bot")
            (t (format ":%d%%%%" (/ end 0.01 pend)))))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defun doom-mode-line (&optional id)
  `(:eval
    (let* ((active (eq (selected-window) mode-line-selected-window))
           (lhs (list (propertize " " 'display (if active mode-line-bar mode-line-inactive-bar))
                      (*flycheck)
                      (*macro-recording)
                      (*selection-info)
                      (*anzu)
                      (*evil-substitute)
                      (*iedit)
                      " "
                      (*buffer-path)
                      (*buffer-name)
                      " "
                      (*buffer-state)
                      ,(if (eq id 'scratch) '(*buffer-pwd))))
           (rhs (list (*buffer-encoding-abbrev)
                      (*vc)
                      "  " (*major-mode) "  "
                      (propertize
                       (concat "(%l,%c) " (*buffer-position))
                       'face (if active 'mode-line-2))))
           (middle (propertize
                    " " 'display `((space :align-to (- (+ right right-fringe right-margin)
                                                       ,(1+ (string-width (format-mode-line rhs)))))))))
      (with-demoted-errors "Mode-line error: %s" (list lhs middle rhs)))))

(setq-default mode-line-format (doom-mode-line))

#+END_SRC

** EmacsMirror Epkg
A [[https://github.com/emacscollective/epkg][helpful package]] to search [[https://emacsmirror.net][emacsmirror]] for packages
#+BEGIN_SRC emacs-lisp
(use-package epkg
  :commands (epkg-list-packages epkg-list-matching-packages
  epkg-list-keyworded-packages)
  :config
  (evil-set-initial-state 'epkg-list-mode 'motion)
  (setq epkg-repository (concat cpm-cache-dir "epkg-repository")))
#+END_SRC

** DISABLED Circadian Theme-changer (based on time of day)
CLOSED: [2018-02-19 Mon 16:31]
[[https://github.com/guidoschmidt/circadian.el][Change your theme]] depending on location and time of day
#+BEGIN_SRC emacs-lisp 
  (use-package circadian
    :if (display-graphic-p)
    :disabled t
    :defer .25
    :init
    (add-hook 'circadian-after-load-theme-hook
          #'(lambda (theme)
               (if (eq active-theme 'solarized-light) 
                     (cpm/osx-menubar-theme-light)
                     (cpm/osx-menubar-theme-dark))))
    :config
    (ignore-errors
    (setq circadian-themes '(("13:00"  . solarized-light)
                              (:sunset  . solarized-dark))))
    (circadian-setup))
#+END_SRC





** DISABLED Line Numbers (Nlinum mode for emacs 25)
CLOSED: [2018-03-03 Sat 21:24]
 #+BEGIN_SRC emacs-lisp :tangle no
     (use-package nlinum
     :commands nlinum-mode
     :config
      (setq-default nlinum-format "%2d ")
      (setq nlinum-highlight-current-line t)
        (custom-set-faces
         '(nlinum-current-line ((t (:inherit default :foreground "goldenrod1")))))
         '(nlinum-current-line ((t (:inherit default :foreground "goldenrod1" :height 1)))))

   (defun cpm/enable-line-numbers (&optional arg)
     "Enables the display of line numbers, using `display-line-numbers' (in Emacs
   26+) or `nlinum-mode'."
     (if (boundp 'display-line-numbers)
         (setq display-line-numbers t)
       (nlinum-mode +1)))

   (defun cpm/disable-line-numbers ()
     "Disable the display of line numbers."
     (if (boundp 'display-line-numbers)
         (setq display-line-numbers nil)
       (nlinum-mode -1)))

   ;; (add-hook 'prog-mode-hook #'cpm/enable-line-numbers)
   ;; (add-hook 'text-mode-hook #'cpm/enable-line-numbers)
   ;; (add-hook 'conf-mode-hook #'cpm/enable-line-numbers)

 #+END_SRC

