;; Project Management
;; This project workflow primarily uses a single frame with
;; different workspaces, made possible by projectile and eyebrowse.
;; See also https://raw.githubusercontent.com/seagle0128/.emacs.d/master/lisp/init-persp.el

;;; Projectile
(use-package projectile
  :ensure t
  :hook (after-init . projectile-mode)
  :init
  ;; save projectile-known-projects-file in cache folder
  (setq projectile-known-projects-file
        (concat cpm-cache-dir "projectile-bookmarks.eld"))
  (setq projectile-cache-file
        (concat cpm-cache-dir "projectile.cache"))
  (setq projectile-enable-caching t
        projectile-files-cache-expire 60)
  :config
  ;; Use the faster searcher to handle project files: ripgrep `rg'.
  (when (and (not (executable-find "fd"))
             (executable-find "rg"))
    (setq projectile-generic-command
          (let ((rg-cmd ""))
            (dolist (dir projectile-globally-ignored-directories)
              (setq rg-cmd (format "%s --glob '!%s'" rg-cmd dir)))
            (concat "rg -0 --files --color=never --hidden" rg-cmd))))
  (setq projectile-git-submodule-command nil))

;;; Eyebrowse
(use-package eyebrowse
  :commands (eyebrowse-mode
             eyebrowse-create-window-config
             eyebrowse-switch-to-window-config-1
             eyebrowse-switch-to-window-config-2)
  :init
  (setq eyebrowse-keymap-prefix (kbd "C-c C-b"))
  :hook (after-init . eyebrowse-mode)
  :config
  (setq eyebrowse-new-workspace t
        eyebrowse-mode-line-style 'hide
        eyebrowse-wrap-around t
        eyebrowse-switch-back-and-forth t))

;;; Perspectives
;; I use this to isolate buffers in the different eyebrowse workspaces
(use-package persp-mode
  :ensure t
  :hook (after-init . persp-mode)
  :commands (get-current-persp
             persp-contain-buffer-p
             persp-mode
             persp-switch
             persp-next
             persp-prev
             persp-add-buffer
             persp-rename
             persp-kill)
  :general
  (:states '(insert normal motion emacs)
   :keymaps 'override
   "s-p" 'persp-switch
   "s-]" 'persp-next
   "s-[" 'persp-prev)
  :config
  (setq persp-add-buffer-on-after-change-major-mode t
        persp-nil-name "default"
        persp-set-last-persp-for-new-frames nil
        persp-kill-foreign-buffer-behaviour 'kill
        persp-auto-resume-time -1
        persp-autokill-buffer-on-remove 'kill-weak
        persp-save-dir (expand-file-name "persp-confs/" cpm-cache-dir)
        persp-common-buffer-filter-functions
        (list #'(lambda (b)
                  "Ignore temporary buffers."
                  (or (string-prefix-p " " (buffer-name b))
                      (and (string-prefix-p "*" (buffer-name b))
                           (not (string-equal "*scratch*" (buffer-name b))))
                      (string-prefix-p "magit" (buffer-name b))
                      (string-prefix-p "Pfuture-Callback" (buffer-name b))
                      (eq (buffer-local-value 'major-mode b) 'nov-mode)
                      (eq (buffer-local-value 'major-mode b) 'vterm-mode)))))
  ;; fix for (void-function make-persp-internal) error
  ;; NOTE: Redefine `persp-add-new' to address.
  ;; Issue: Unable to create/handle persp-mode
  ;; https://github.com/Bad-ptr/persp-mode.el/issues/96
  ;; https://github.com/Bad-ptr/persp-mode-projectile-bridge.el/issues/4
  ;; https://emacs-china.org/t/topic/6416/7
  (defun* persp-add-new (name &optional (phash *persp-hash*))
    "Create a new perspective with the given `NAME'. Add it to `PHASH'.
   Return the created perspective."
    (interactive "sA name for the new perspective: ")
    (if (and name (not (equal "" name)))
        (destructuring-bind (e . p)
            (persp-by-name-and-exists name phash)
          (if e p
            (setq p (if (equal persp-nil-name name)
                        nil (make-persp :name name)))
            (persp-add p phash)
            (run-hook-with-args 'persp-created-functions p phash)
            p))
      (message "[persp-mode] Error: Can't create a perspective with empty name.")
      nil))

  ;; Integrate Ivy
  ;; https://gist.github.com/Bad-ptr/1aca1ec54c3bdb2ee80996eb2b68ad2d#file-persp-ivy-el
  (with-eval-after-load 'ivy
    (add-to-list 'ivy-ignore-buffers
                 #'(lambda (b)
                     (when persp-mode
                       (let ((persp (get-current-persp)))
                         (if persp
                             (not (persp-contain-buffer-p b persp))
                           nil)))))))
  ;; (add-hook 'persp-switch-hook 'cpm/eyebrowse-persp-switch))


;; work with projectile
(use-package persp-mode-projectile-bridge
  :ensure t
  :after projectile
  :functions (persp-add-new
              persp-add-buffer
              set-persp-parameter)
  :commands (persp-mode-projectile-bridge-find-perspectives-for-all-buffers
             persp-mode-projectile-bridge-kill-perspectives
             persp-mode-projectile-bridge-add-new-persp
             projectile-project-buffers)
  :hook ((persp-mode . persp-mode-projectile-bridge-mode)
         (persp-mode-projectile-bridge-mode
          .
          (lambda ()
            (if persp-mode-projectile-bridge-mode
                (persp-mode-projectile-bridge-find-perspectives-for-all-buffers)
              (persp-mode-projectile-bridge-kill-perspectives))))))

;;; Project Functions
;; courtesy of spacemacs
;; Eyebrowse - allow perspective-local workspaces --------------------------

(defun spacemacs/load-eyebrowse-for-perspective (&optional frame)
  "Load an eyebrowse workspace according to a perspective's parameters.
 FRAME's perspective is the perspective that is considered, defaulting to
 the current frame's perspective.
 If the perspective doesn't have a workspace, create one."
  (let* ((persp (get-frame-persp frame))
         (window-configs (persp-parameter 'eyebrowse-window-configs persp))
         (current-slot (persp-parameter 'eyebrowse-current-slot persp))
         (last-slot (persp-parameter 'eyebrowse-last-slot persp)))
    (if window-configs
        (progn
          (eyebrowse--set 'window-configs window-configs frame)
          (eyebrowse--set 'current-slot current-slot frame)
          (eyebrowse--set 'last-slot last-slot frame)
          (eyebrowse--load-window-config current-slot))
      (eyebrowse--set 'window-configs nil frame)
      (eyebrowse-init frame)
      (spacemacs/save-eyebrowse-for-perspective frame))))

(defun spacemacs/update-eyebrowse-for-perspective (_new-persp-name)
  "Update and save current frame's eyebrowse workspace to its perspective.
 Parameter _NEW-PERSP-NAME is ignored, and exists only for compatibility with
 `persp-before-switch-functions'."
  (eyebrowse--update-window-config-element
   (eyebrowse--current-window-config (eyebrowse--get 'current-slot)
                                     (eyebrowse--get 'current-tag)))
  (spacemacs/save-eyebrowse-for-perspective))

(defun spacemacs/save-eyebrowse-for-perspective (&optional frame)
  "Save FRAME's eyebrowse workspace to FRAME's perspective.
 FRAME defaults to the current frame."
  (let ((persp (get-frame-persp frame)))
    (set-persp-parameter
     'eyebrowse-window-configs (eyebrowse--get 'window-configs frame) persp)
    (set-persp-parameter
     'eyebrowse-current-slot (eyebrowse--get 'current-slot frame) persp)
    (set-persp-parameter
     'eyebrowse-last-slot (eyebrowse--get 'last-slot frame) persp)))

(defun spacemacs-layouts/post-init-eyebrowse ()
  (add-hook 'persp-before-switch-functions #'spacemacs/update-eyebrowse-for-perspective)
  (add-hook 'eyebrowse-post-window-switch-hook #'spacemacs/save-eyebrowse-for-perspective)
  (add-hook 'persp-activated-hook #'spacemacs/load-eyebrowse-for-perspective))

;;; Old Project Functions
;; ;;;; Switch Eyebrowse after Change of Perspective
;; (defun cpm/eyebrowse-persp-switch ()
;;   "set eyebrowse when switching perspectives"
;;   (interactive)
;;   (let* ((persp-name (persp-name CL-X))
;;          (eyebrowse-switch-to-window-config persp-name))))

;; ;;;; Open agenda as Workspace
;; (defun cpm/open-agenda-in-workspace ()
;;   "open agenda in its own workspace"
;;   (interactive)
;;   ;; (eyebrowse-mode)
;;   ;; (eyebrowse-switch-to-window-config-1)
;;   (persp-switch "agenda")
;;   (setq frame-title-format '("" "%b"))
;;   (require 'org-super-agenda)
;;   (cpm/jump-to-org-super-agenda)
;;   ;; (eyebrowse-rename-window-config (eyebrowse--get 'current-slot) "agenda")
;;   (persp-add-buffer "*Org Agenda*"))

;; (general-define-key
;;  :states '(insert normal motion emacs)
;;  :keymaps 'override
;;  "s-1" 'cpm/open-agenda-in-workspace)

;; ;;;; Open emacs.d in workspace
;; (defun cpm/open-emacsd-in-workspace ()
;;   "open emacsd in workspace"
;;   (interactive)
;;   ;; (eyebrowse-mode)
;;   ;; (eyebrowse-switch-to-window-config-2)
;;   (persp-switch "emacs.d")
;;   (setq frame-title-format
;;         '(""
;;           "%b"
;;           (:eval
;;            (let ((project-name (projectile-project-name)))
;;              (unless (string= "-" project-name)
;;                (format " in [%s]" project-name))))))
;;   (require 'crux)
;;   (crux-find-user-init-file)
;;   ;; (eyebrowse-rename-window-config (eyebrowse--get 'current-slot) "emacs.d")
;;   (require 'magit)
;;   (magit-status-setup-buffer))

;; (general-define-key
;;  :states '(insert normal motion emacs)
;;  :keymaps 'override
;;  "s-2" 'cpm/open-emacsd-in-workspace)


;;;; Open New Project in Workspace
(defun cpm/open-project-and-workspace ()
  "open a new project as its own workspace -- i.e. in its own perspective and eyebrowse slot"
  (interactive)
  ;; (eyebrowse-create-window-config)
  (counsel-projectile-switch-project)
  (setq frame-title-format
        '(""
          "%b"
          (:eval
           (let ((project-name (projectile-project-name)))
             (unless (string= "-" project-name)
               (format " in [%s]" project-name))))))
  (persp-switch (projectile-project-name))
  (require 'magit)
  (magit-status-setup-buffer))

;;;; Open a Project in a New Frame
(defun cpm/open-project-and-frame ()
  (interactive)
  (let ((buffer (generate-new-buffer "untitled")))
    (set-buffer-major-mode buffer)
    (display-buffer buffer '(display-buffer-pop-up-frame . nil)))
  (crux-create-scratch-buffer)
  (counsel-projectile-switch-project)
  (toggle-frame-maximized)
  (setq frame-title-format
        '(""
          "%b"
          (:eval
           (let ((project-name (projectile-project-name)))
             (unless (string= "-" project-name)
               (format " in [%s]" project-name))))))
  (split-window-right)
  (require 'magit)
  (magit-status-setup-buffer))

;;; Bookmarks
(use-package bookmark
  :defer 2
  :config
  (setq bookmark-default-file (concat cpm-cache-dir "bookmarks")))

(use-package bookmark+
  :commands (bmkp-switch-bookmark-file-create bmkp-set-desktop-bookmark)
  :config
  (setq bmkp-last-as-first-bookmark-file (concat cpm-cache-dir "bookmarks")))

;;; Org and Projectile
(use-package org-projectile
  :ensure t
  :defer 3
  :config
  (setq org-projectile-projects-file "~/Dropbox/org-files/projects.org"))

(use-package org-projectile-helm
  :ensure t
  :after org-projectile)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (provide 'setup-projects)
