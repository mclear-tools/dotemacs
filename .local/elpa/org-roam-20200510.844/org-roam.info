This is org-roam.info, produced by makeinfo version 6.5 from
org-roam.texi.

     Copyright (C) 2020-2020 Jethro Kuan <jethrokuan95@gmail.com>

     You can redistribute this document and/or modify it under the terms
     of the GNU General Public License as published by the Free Software
     Foundation, either version 3 of the License, or (at your option)
     any later version.

     This document is distributed in the hope that it will be useful,
     but WITHOUT ANY WARRANTY; without even the implied warranty of
     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
     General Public License for more details.

INFO-DIR-SECTION Emacs
START-INFO-DIR-ENTRY
* Org-roam: (org-roam). Rudimentary Roam Replica for Emacs.
END-INFO-DIR-ENTRY


File: org-roam.info,  Node: Top,  Next: Introduction,  Up: (dir)

Org-roam User Manual
********************

This manual is for Org-roam version 1.1.0 (v1.1.0-29-g00fc215+1).

     Copyright (C) 2020-2020 Jethro Kuan <jethrokuan95@gmail.com>

     You can redistribute this document and/or modify it under the terms
     of the GNU General Public License as published by the Free Software
     Foundation, either version 3 of the License, or (at your option)
     any later version.

     This document is distributed in the hope that it will be useful,
     but WITHOUT ANY WARRANTY; without even the implied warranty of
     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
     General Public License for more details.

* Menu:

* Introduction::
* Installation::
* Getting Started::
* Anatomy of an Org-roam File::
* The Templating System::
* Concepts and Configuration::
* Navigating Around::
* Encryption::
* Graphing::
* Org-roam Completion System::
* Roam Protocol::
* Keystroke Index::
* Command Index::
* Function Index::
* Variable Index::
* Appendix::
* FAQ::

— The Detailed Node Listing —

Installation

* Installing from MELPA::
* Installing from the Git Repository::
* Post-Installation Tasks::

Anatomy of an Org-roam File

* File Aliases::
* File Refs::

The Templating System

* Template Walkthrough::
* Org-roam Template Expansion::

Concepts and Configuration

* Directories and Files::
* The Org-roam Buffer::
* Org-roam Links::
* Org-roam Files::

Navigating Around

* Index File::

Graphing

* Graph Options::
* Excluding Nodes and Edges::

Roam Protocol

* Installation: Installation (1).
* The roam-file protocol::
* The roam-ref Protocol::

Appendix

* Note-taking Workflows::
* Ecosystem::

Ecosystem

* Deft::
* Org-journal::
* Note-taking Add-ons::


FAQ

* How do I have more than one Org-roam directory?::



File: org-roam.info,  Node: Introduction,  Next: Installation,  Prev: Top,  Up: Top

1 Introduction
**************

Org-roam is a Roam Research (https://roamresearch.com/) replica built
around the all-powerful Org-mode (https://orgmode.org/).

   Org-roam is a solution for effortless non-hierarchical note-taking
with Org-mode.  With Org-roam, notes flow naturally, making note-taking
fun and easy.  Org-roam should also work as a plug-and-play solution for
anyone already using Org-mode for their personal wiki.

   To understand more about Roam, a collection of links are available in
*note Note-taking Workflows::.

   Org-roam aims to implement the core features of Roam, leveraging the
mature ecosystem around Org-mode where possible.  Eventually, we hope to
further introduce features enabled by the Emacs ecosystem.

   Org-roam provides several benefits over other tooling:

   • Privacy and SecurityEdit your personal wiki completely offline,
     entirely in your control.  Encrypt your notes with GPG.

   • Longevity of Plain TextUnlike web solutions like Roam research, the
     notes are first and foremost plain Org-mode files – Org-roam simply
     builds up an auxilliary database to give the personal wiki
     superpowers.  Having your notes in plain-text is crucial for the
     longevity of your wiki.  Never have to worry about proprietary web
     solutions being taken down.  Edit your plain-text notes in notepad
     if all other editors cease to exist

   • Free and Open SourceOrg-roam is free and open-source, which means
     that if you feel unhappy with any part of Org-roam, you may choose
     to extend Org-roam, or open a PR.

   • Leverages the Org-mode ecosystemOver the years, Emacs and Org-mode
     has developed into a mature system for plain-text organization.
     Building upon Org-mode already puts Org-roam light-years ahead of
     many other solutions.

   • Built on EmacsEmacs is also a fantastic interface for editing text,
     and we can inherit many of the powerful text-navigation and editing
     packages available to Emacs.


File: org-roam.info,  Node: Installation,  Next: Getting Started,  Prev: Introduction,  Up: Top

2 Installation
**************

Org-roam can be installed using Emacs’ package manager or manually from
its development repository.

* Menu:

* Installing from MELPA::
* Installing from the Git Repository::
* Post-Installation Tasks::


File: org-roam.info,  Node: Installing from MELPA,  Next: Installing from the Git Repository,  Up: Installation

2.1 Installing from MELPA
=========================

Org-roam is available from Melpa and Melpa-Stable.  If you haven’t used
Emacs’ package manager before, you may familiarize yourself with it by
reading the documentation in the Emacs manual, see *note
(emacs)Packages::.  Then, add one of the archives to ‘package-archives’:

   • To use Melpa:

     (require 'package)
     (add-to-list 'package-archives
                  '("melpa" . "http://melpa.org/packages/") t)

   • To use Melpa-Stable:

     (require 'package)
     (add-to-list 'package-archives
                  '("melpa-stable" . "http://stable.melpa.org/packages/") t)

   Once you have added your preferred archive, you need to update the
local package list using:

     M-x package-refresh-contents RET

   Once you have done that, you can install Org-roam and its
dependencies using:

     M-x package-install RET org-roam RET

   Now see *note Post-Installation Tasks::.


File: org-roam.info,  Node: Installing from the Git Repository,  Next: Post-Installation Tasks,  Prev: Installing from MELPA,  Up: Installation

2.2 *TODO* Installing from the Git Repository
=============================================


File: org-roam.info,  Node: Post-Installation Tasks,  Prev: Installing from the Git Repository,  Up: Installation

2.3 *TODO* Post-Installation Tasks
==================================


File: org-roam.info,  Node: Getting Started,  Next: Anatomy of an Org-roam File,  Prev: Installation,  Up: Top

3 Getting Started
*****************

This short tutorial describes the essential commands used in Org-roam,
to help you get started.

   First, it is important to understand how Org-roam was designed.
Org-roam was built to support a workflow that was not possible with
vanilla Org-mode.  This flow is modelled after the Zettelkasten Method
(https://zettelkasten.de/), and many of Roam Research’s
(https://roamresearch.com) workflows.  Org-roam does not magically make
note-taking better – this often requires a radical change in your
current note-taking workflow.  To understand more about the methods and
madness, see *note Note-taking Workflows::.

   To begin using Org-roam, one should set the ‘org-roam-directory’ to
the directory containing your notes.  For this tutorial, create an empty
directory, and set the ‘org-roam-directory’:

     (make-directory "~/org-roam")
     (setq org-roam-directory "~/org-roam")

   We encourage using a flat hierarchy for storing notes, but some
prefer using folders for storing specific kinds of notes (e.g.
websites, papers).  This is fine; Org-roam searches recursively within
‘org-roam-directory’ for any notes.  Instead of relying on the file
hierarchy for any form of categorization, we solely rely on links
between files to establish connections between notes.

   Next, we need to enable the global minor mode ‘org-roam-mode’.  This
sets up Emacs with several hooks, builds a cache and keeps it
consistent.  We recommend starting ‘org-roam-mode’ on startup:

     (add-hook 'after-init-hook 'org-roam-mode)

   To build the cache manually, one can run ‘M-x
org-roam-db-build-cache’.  The cache is a sqlite database named
‘org-roam.db’, which defaults to residing in the root
‘org-roam-directory’.  Cache builds may take a while the first time, but
is often instantaneous in subsequent runs.

   Let us now create our first note.  Call ‘M-x org-roam-find-file’.
This shows a list of titles for notes that reside in
‘org-roam-directory’.  It should show nothing right now, since there are
no notes in the directory.  Entering the title of the note you wish to
create, and pressing ‘RET’ should begin the note creation process.  This
process uses ‘org-capture’’s templating system, and can be freely
customized (see *note The Templating System::).  Using the default
template, pressing ‘C-c C-c’ finishes the note capture.  Running ‘M-x
org-roam-find-file’ again should show the note you have created, and
selecting that entry will bring you to that note.

   The crux of Org-roam is making it easy to create notes, and link them
together.  To link notes together, we call ‘M-x org-roam-insert’.  This
brings up a prompt with a list of title for existing notes.  Selecting
an existing entry will create and insert a link to the current file.
Entering a non-existent title will create a new note with that title.
Good usage of Org-roam requires liberally linking files: this
facilitates building up a dense knowledge graph of inter-connected
notes.

   Org-roam provides an interface to view backlinks.  It shows backlinks
for the currently active Org-roam note, along with some surrounding
context.  To toggle the visibility of this buffer, call ‘M-x org-roam’.

   For a visual representation of the notes and their connections,
Org-roam also provides graphing capabilities, using Graphviz.  It
generates graphs with notes as nodes, and links between them as edges.
The generated graph can be used to navigate to the files, but this
requires some additional setup (see *note Roam Protocol: Roam
Protocol.).


File: org-roam.info,  Node: Anatomy of an Org-roam File,  Next: The Templating System,  Prev: Getting Started,  Up: Top

4 Anatomy of an Org-roam File
*****************************

The bulk of Org-roam’s functionality is built on top of vanilla
Org-mode.  However, to support additional functionality, Org-roam adds
several Org-roam-specific keywords.  These functionality are not crucial
to effective use of Org-roam.

* Menu:

* File Aliases::
* File Refs::


File: org-roam.info,  Node: File Aliases,  Next: File Refs,  Up: Anatomy of an Org-roam File

4.1 File Aliases
================

Suppose you want a note to be referred to by different names (e.g.
"World War 2", "WWII"). You may specify such aliases using the
‘#+ROAM_ALIAS’ attribute:

     #+TITLE: World War 2
     #+ROAM_ALIAS: "WWII" "World War II"


File: org-roam.info,  Node: File Refs,  Prev: File Aliases,  Up: Anatomy of an Org-roam File

4.2 File Refs
=============

Refs are unique identifiers for files.  Each note can only have 1 ref.
For example, a note for a website may contain a ref:

     #+TITLE: Google
     #+ROAM_KEY: https://www.google.com/

   These keys come in useful for when taking website notes, using the
‘roam-ref’ protocol (see *note Roam Protocol::).

   Alternatively, add a ref for notes for a specific paper, using its
org-ref (https://github.com/jkitchin/org-ref) citation key:

     #+TITLE: Neural Ordinary Differential Equations
     #+ROAM_KEY: cite:chen18_neural_ordin_differ_equat

   The backlinks buffer will show any cites of this key: e.g.

 [image src="images/org-ref-citelink.png" ]

Figure: org-ref-citelink


File: org-roam.info,  Node: The Templating System,  Next: Concepts and Configuration,  Prev: Anatomy of an Org-roam File,  Up: Top

5 The Templating System
***********************

Rather than creating blank files on ‘org-roam-insert’ and
‘org-roam-find-file’, it may be desirable to prefill the file with
templated content.  This may include:

   • Time of creation

   • File it was created from

   • Clipboard content

   • Any other data you may want to input manually

   This requires a complex template insertion system.  Fortunately, Org
ships with a powerful one: ‘org-capture’.  However, org-capture was not
designed for such use.  Org-roam abuses ‘org-capture’, extending its
syntax.  To first understand how org-roam’s templating system works, it
may be useful to look into basic usage of ‘org-capture’.

* Menu:

* Template Walkthrough::
* Org-roam Template Expansion::


File: org-roam.info,  Node: Template Walkthrough,  Next: Org-roam Template Expansion,  Up: The Templating System

5.1 Template Walkthrough
========================

To demonstrate the additions made to org-capture templates.  Here, we
walkthrough the default template, reproduced below.

     ("d" "default" plain (function org-roam--capture-get-point)
          "%?"
          :file-name "%<%Y%m%d%H%M%S>-${slug}"
          :head "#+TITLE: ${title}\n"
          :unnarrowed t)

   • The template has short key ‘"d"’.  If you have only one template,
     org-roam automatically chooses this template for you.

   • The template is given a description of ‘"default"’.

   • ‘plain’ text is inserted.  Other options include Org headings via
     ‘entry’.

   • ‘(function org-roam--capture-get-point)’ should not be changed.

   • ‘"%?"’ is the template inserted on each call to
     ‘org-roam-capture--capture’.  This template means don’t insert any
     content, but place the cursor here.

   • ‘:file-name’ is the file-name template for a new note, if it
     doesn’t yet exist.  This creates a file at path that looks like
     ‘/path/to/org-roam-directory/20200213032037-foo.org’.

   • ‘:head’ contains the initial template to be inserted (once only),
     at the beginning of the file.  Here, the title global attribute is
     inserted.

   • ‘:unnarrowed t’ tells org-capture to show the contents for the
     whole file, rather than narrowing to just the entry.

   Other options you may want to learn about include
‘:immediate-finish’.


File: org-roam.info,  Node: Org-roam Template Expansion,  Prev: Template Walkthrough,  Up: The Templating System

5.2 Org-roam Template Expansion
===============================

Org-roam’s template definitions also extend org-capture’s template
syntax, to allow prefilling of strings.  We have seen a glimpse of this
in *note Template Walkthrough: Template Walkthrough.

   In org-roam templates, the ‘${var}’ syntax allows for the expansion
of variables, stored in ‘org-roam-capture--info’.  For example, during
‘org-roam-insert’, the user is prompted for a title.  Upon entering a
non-existent title, the ‘title’ key in ‘org-roam-capture--info’ is set
to the provided title.  ‘${title}’ is then expanded into the provided
title during the org-capture process.  Any variables that do not contain
strings, are prompted for values using ‘completing-read’.

   After doing this expansion, the org-capture’s template expansion
system is used to fill up the rest of the template.  You may read up
more on this on org-capture’s documentation page
(https://orgmode.org/manual/Template-expansion.html#Template-expansion).

   To illustrate this dual expansion process, take for example the
template string: ‘"%<%Y%m%d%H%M%S>-${title}"’, with the title ‘"Foo"’.
The template is first expanded into ‘%<%Y%m%d%H%M%S>-Foo’.  Then
org-capture expands ‘%<%Y%m%d%H%M%S>’ with timestamp: e.g.
‘20200213032037-Foo’.

   All of the flexibility afforded by Emacs and Org-mode are available.
For example, if you want to encode a UTC timestamp in the filename, you
can take advantage of org-mode’s ‘%(EXP)’ template expansion to call
‘format-time-string’ directly to provide its third argument to specify
UTC.

     ("d" "default" plain (function org-roam--capture-get-point)
          "%?"
          :file-name "%(format-time-string \"%Y-%m-%d--%H-%M-%SZ--${slug}\" (current-time) t)"
          :head "#+TITLE: ${title}\n"
          :unnarrowed t)


File: org-roam.info,  Node: Concepts and Configuration,  Next: Navigating Around,  Prev: The Templating System,  Up: Top

6 Concepts and Configuration
****************************

The number of configuration options is deliberately kept small, to keep
the Org-roam codebase manageable.  However, we attempt to accommodate as
many usage styles as possible.

   All of Org-roam’s customization options can be viewed via ‘M-x
customize-group org-roam’.

* Menu:

* Directories and Files::
* The Org-roam Buffer::
* Org-roam Links::
* Org-roam Files::


File: org-roam.info,  Node: Directories and Files,  Next: The Org-roam Buffer,  Up: Concepts and Configuration

6.1 Directories and Files
=========================

This section concerns the placement and creation of files.

 -- Variable: org-roam-directory

     This is the default path to Org-roam files.  All Org files, at any
     level of nesting, are considered part of the Org-roam.

 -- Variable: org-roam-db-location

     Location of the Org-roam database.  If this is non-nil, the
     Org-roam sqlite database is saved here.

     It is the user’s responsibility to set this correctly, especially
     when used with multiple Org-roam instances.


File: org-roam.info,  Node: The Org-roam Buffer,  Next: Org-roam Links,  Prev: Directories and Files,  Up: Concepts and Configuration

6.2 The Org-roam Buffer
=======================

The Org-roam buffer displays backlinks for the currently active Org-roam
note.

 -- User Option: org-roam-buffer

     The name of the org-roam buffer.  Defaults to ‘*org-roam*’.

 -- User Option: org-roam-buffer-position

     The position of the Org-roam buffer side window.  Valid values are
     ‘'left’, ‘'right’, ‘'top’, ‘'bottom’.

 -- User Option: org-roam-buffer-width

     Width of ‘org-roam-buffer’.  Has an effect only if
     ‘org-roam-buffer-position’ is ‘'left’ or ‘'right’.

 -- User Option: org-roam-buffer-height

     Height of ‘org-roam-buffer’.  Has an effect only if
     ‘org-roam-buffer-position’ is ‘'top’ or ‘'bottom’.

 -- User Option: org-roam-buffer-no-delete-window

     The ‘no-delete-window’ parameter for the org-roam buffer.  Setting
     it to ‘'t’ prevents the window from being deleted when calling
     ‘delete-other-windows’.


File: org-roam.info,  Node: Org-roam Links,  Next: Org-roam Files,  Prev: The Org-roam Buffer,  Up: Concepts and Configuration

6.3 Org-roam Links
==================

Org-roam links are regular ‘file:’ links in Org-mode.  By default, links
are inserted with the title as the link description with
‘org-roam-insert’.

 -- User Option: org-roam-link-title-format

     To distinguish between org-roam links and regular links, one may
     choose to use special indicators for Org-roam links.  Defaults to
     ‘"%s"’.

     If your version of Org is at least ‘9.2’, consider styling the link
     differently, by customizing the ‘org-roam-link’, and
     ‘org-roam-link-current’ faces.


File: org-roam.info,  Node: Org-roam Files,  Prev: Org-roam Links,  Up: Concepts and Configuration

6.4 Org-roam Files
==================

Org-roam files are created and prefilled using Org-roam’s templating
system.  The templating system is customizable (see *note The Templating
System::).


File: org-roam.info,  Node: Navigating Around,  Next: Encryption,  Prev: Concepts and Configuration,  Up: Top

7 Navigating Around
*******************

* Menu:

* Index File::


File: org-roam.info,  Node: Index File,  Up: Navigating Around

7.1 Index File
==============

As your collection grows, you might want to create an index where you
keep links to your main files.

   In Org-roam, you can define the path to your index file by setting
‘org-roam-index-file’.

 -- Variable: org-roam-index-file

     Path to the Org-roam index file.

     The path can be a string or a function.  If it is a string, it
     should be the path (absolute or relative to ‘org-roam-directory’)
     to the index file.  If it is is a function, the function should
     return the path to the index file.  Otherwise, the index is assumed
     to be a note in ‘org-roam-index’ whose title is ‘"Index"’.

 -- Function: org-roam-find-index

     Opens the Index file in the current ‘org-roam-directory’.


File: org-roam.info,  Node: Encryption,  Next: Graphing,  Prev: Navigating Around,  Up: Top

8 Encryption
************

One may wish to keep private, encrypted files.  Org-roam supports
encryption (via GPG), which can be enabled for all new files by setting
‘org-roam-encrypt-files’ to ‘t’.  When enabled, new files are created
with the ‘.org.gpg’ extension and decryption are handled automatically
by EasyPG.

   Note that Emacs will prompt for a password for encrypted files during
cache updates if it requires reading the encrypted file.  To reduce the
number of password prompts, you may wish to cache the password.

 -- Variable: org-roam-encrypt-files

     Whether to encrypt new files.  If true, create files with .org.gpg
     extension.


File: org-roam.info,  Node: Graphing,  Next: Org-roam Completion System,  Prev: Encryption,  Up: Top

9 Graphing
**********

Org-roam provides graphing capabilities to explore interconnections
between notes.  This is done by performing SQL queries and generating
images using Graphviz (https://graphviz.org/).  The graph can also be
navigated: see *note Roam Protocol::.

   The entry point to graph creation is ‘org-roam-graph’.

 -- Function: org-roam-graph & optional arg file node-query

     Build and possibly display a graph for FILE from NODE-QUERY.  If
     FILE is nil, default to current buffer’s file name.  ARG may be any
     of the following values:

        • ‘nil’ show the graph.

        • ‘C-u’ show the graph for FILE.

        • ‘C-u N’ show the graph for FILE limiting nodes to N steps.

        • ‘C-u C-u’ build the graph.

        • ‘C-u -’ build the graph for FILE.

        • ‘C-u -N’ build the graph for FILE limiting nodes to N steps.

 -- User Option: org-roam-graph-executable

     Path to the graphing executable (in this case, Graphviz).  Set this
     if Org-roam is unable to find the Graphviz executable on your
     system.

     You may also choose to use ‘neato’ in place of ‘dot’, which
     generates a more compact graph layout.

 -- User Option: org-roam-graph-viewer

     Org-roam defaults to using Firefox (located on PATH) to view the
     SVG, but you may choose to set it to:

        • A string, which is a path to the program used

        • a function accepting a single argument: the graph file path.

     ‘nil’ uses ‘view-file’ to view the graph.

* Menu:

* Graph Options::
* Excluding Nodes and Edges::


File: org-roam.info,  Node: Graph Options,  Next: Excluding Nodes and Edges,  Up: Graphing

9.1 Graph Options
=================

Graphviz provides many options for customizing the graph output, and
Org-roam supports some of them.  See
<https://graphviz.gitlab.io/_pages/doc/info/attrs.html> for customizable
options.

 -- User Option: org-roam-graph-extra-config

     Extra options passed to graphviz for the digraph (The "G"
     attributes).  Example: ‘'=(("rankdir" . "LR"))’

 -- User Option: org-roam-graph-node-extra-config

     Extra options for nodes in the graphviz output (The "N"
     attributes).  Example: ‘'(("color" . "skyblue"))’

 -- User Option: org-roam-graph-edge-extra-config

     Extra options for edges in the graphviz output (The "E"
     attributes).  Example: ‘'(("dir" . "back"))’

 -- User Option: org-roam-graph-edge-cites-extra-config

     Extra options for citation edges in the graphviz output.  Example:
     ‘'(("color" . "red"))’


File: org-roam.info,  Node: Excluding Nodes and Edges,  Prev: Graph Options,  Up: Graphing

9.2 Excluding Nodes and Edges
=============================

One may want to exclude certain files to declutter the graph.

 -- User Option: org-roam-graph-exclude-matcher

     Matcher for excluding nodes from the generated graph.  Any nodes
     and links for file paths matching this string is excluded from the
     graph.

     If value is a string, the string is the only matcher.

     If value is a list, all file paths matching any of the strings are
     excluded.

     (setq org-roam-graph-exclude-matcher '("private" "dailies"))

   This setting excludes all files whose path contain "private" or
"dailies".


File: org-roam.info,  Node: Org-roam Completion System,  Next: Roam Protocol,  Prev: Graphing,  Up: Top

10 Org-roam Completion System
*****************************

Org-roam offers completion when choosing note titles etc.  The
completion system is configurable.  The default setting,

     (setq org-roam-completion-system 'default)

   uses Emacs’ standard ‘completing-read’.  If you prefer Helm
(https://emacs-helm.github.io/helm/), use

     (setq org-roam-completion-system 'helm)

   Other options include ‘'ido’, and ‘'ivy’.


File: org-roam.info,  Node: Roam Protocol,  Next: Keystroke Index,  Prev: Org-roam Completion System,  Up: Top

11 Roam Protocol
****************

Org-roam extending ‘org-protocol’ with 2 protocols: the ‘roam-file’ and
‘roam-ref’ protocol.

* Menu:

* Installation: Installation (1).
* The roam-file protocol::
* The roam-ref Protocol::


File: org-roam.info,  Node: Installation (1),  Next: The roam-file protocol,  Up: Roam Protocol

11.1 Installation
=================

To enable Org-roam’s protocol extensions, you have to add the following
to your init file:

     (require 'org-roam-protocol)

   The instructions for setting up ‘org-protocol=’ are reproduced below.

   We will also need to create a desktop application for ‘emacsclient’.
The instructions for various platforms are shown below.

   For Linux users, create a desktop application in
‘~/.local/share/applications/org-protocol.desktop’:

     [Desktop Entry]
     Name=Org-Protocol
     Exec=emacsclient %u
     Icon=emacs-icon
     Type=Application
     Terminal=false
     MimeType=x-scheme-handler/org-protocol

   Associate ‘org-protocol://’ links with the desktop application by
running in your shell:

     xdg-mime default org-protocol.desktop x-scheme-handler/org-protocol

   To disable the "confirm" prompt in Chrome, you can also make Chrome
show a checkbox to tick, so that the ‘Org-Protocol Client’ app will be
used without confirmation.  To do this, run in a shell:

     sudo mkdir -p /etc/opt/chrome/policies/managed/
     sudo tee /etc/opt/chrome/policies/managed/external_protocol_dialog.json >/dev/null <<'EOF'
     {
       "ExternalProtocolDialogShowAlwaysOpenCheckbox": true
     }
     EOF
     sudo chmod 644 /etc/opt/chrome/policies/managed/external_protocol_dialog.json

   and then restart Chrome (for example, by navigating to
<chrome://restart>) to make the new policy take effect.

   See here (https://www.chromium.org/administrators/linux-quick-start)
for more info on the ‘/etc/opt/chrome/policies/managed’ directory and
here
(https://cloud.google.com/docs/chrome-enterprise/policies/?policy=ExternalProtocolDialogShowAlwaysOpenCheckbox)
for information on the ‘ExternalProtocolDialogShowAlwaysOpenCheckbox’
policy.

   For MacOS, one solution is to use Platypus
(https://github.com/sveinbjornt/Platypus).  Here are the instructions
for setting up with Platypus and Chrome:

   • Install and launch Platypus (with Homebrew (https://brew.sh/)):

     brew cask install platypus

   • Create a script ‘launch_emacs.sh’:

     #!/usr/bin/env bash
     /usr/local/bin/emacsclient --no-wait $1

   • Create a Platypus app with the following settings:

     | Setting                        | Value                     |
     |--------------------------------+---------------------------|
     | App Name                       | "OrgProtocol"             |
     | Script Type                    | "env" · "/usr/bin/env"    |
     | Script Path                    | "path/to/launch-emacs.sh" |
     | Interface                      | None                      |
     | Accept dropped items           | true                      |
     | Remain running after execution | false                     |

   Inside ‘Settings’:

     | Setting                        | Value          |
     |--------------------------------+----------------|
     | Accept dropped files           | true           |
     | Register as URI scheme handler | true           |
     | Protocol                       | "org-protocol" |

   To disable the "confirm" prompt in Chrome, you can also make Chrome
show a checkbox to tick, so that the ‘OrgProtocol’ app will be used
without confirmation.  To do this, run in a shell:

     defaults write com.google.Chrome ExternalProtocolDialogShowAlwaysOpenCheckbox -bool true

   If you’re using Emacs Mac Port
(https://github.com/railwaycat/homebrew-emacsmacport), it registered its
‘Emacs.app‘ as the default handler for the URL scheme ‘org-protocol‘.
To make ‘OrgProtocol.app’ the default handler instead, run:

     defaults write com.apple.LaunchServices/com.apple.launchservices.secure LSHandlers -array-add \
     '{"LSHandlerPreferredVersions" = { "LSHandlerRoleAll" = "-"; }; LSHandlerRoleAll = "org.yourusername.OrgProtocol"; LSHandlerURLScheme = "org-protocol";}'

   Then restart your computer.


File: org-roam.info,  Node: The roam-file protocol,  Next: The roam-ref Protocol,  Prev: Installation (1),  Up: Roam Protocol

11.2 The ‘roam-file’ protocol
=============================

This is a simple protocol that opens the path specified by the ‘file’
key (e.g.  ‘org-protocol://roam-file?file=/tmp/file.org’).  This is used
in the generated graph.


File: org-roam.info,  Node: The roam-ref Protocol,  Prev: The roam-file protocol,  Up: Roam Protocol

11.3 The ‘roam-ref’ Protocol
============================

This protocol finds or creates a new note with a given ‘ROAM_KEY’ (see
*note Anatomy of an Org-roam File::):

 [image src="images/roam-ref.gif" ]

   To use this, create a Firefox bookmarklet as follows:

     javascript:location.href =
     'org-protocol://roam-ref?template=r&ref='
     + encodeURIComponent(location.href)
     + '&title='
     + encodeURIComponent(document.title)

   or as a keybinding in ‘qutebrowser’, adding the following to the
‘autoconfig.yml’ file:

     settings:
       bindings.commands:
         global:
           normal:
             gc: open javascript:void(location.href='org-protocol://roam-ref?template=r&ref='+encodeURIComponent(location.href)+'&title='+encodeURIComponent(document.title))

   where ‘template’ is the template key for a template in
‘org-roam-capture-ref-templates’ (see *note The Templating System::).
These templates should contain a ‘#+ROAM_KEY: ${ref}’ in it.


File: org-roam.info,  Node: Keystroke Index,  Next: Command Index,  Prev: Roam Protocol,  Up: Top

Appendix A Keystroke Index
**************************


File: org-roam.info,  Node: Command Index,  Next: Function Index,  Prev: Keystroke Index,  Up: Top

Appendix B Command Index
************************


File: org-roam.info,  Node: Function Index,  Next: Variable Index,  Prev: Command Index,  Up: Top

Appendix C Function Index
*************************

 [index ]
* Menu:

* org-roam-find-index:                   Index File.           (line 22)
* org-roam-graph:                        Graphing.             (line 13)


File: org-roam.info,  Node: Variable Index,  Next: Appendix,  Prev: Function Index,  Up: Top

Appendix D Variable Index
*************************

 [index ]
* Menu:

* org-roam-buffer:                       The Org-roam Buffer.  (line  9)
* org-roam-buffer-height:                The Org-roam Buffer.  (line 23)
* org-roam-buffer-no-delete-window:      The Org-roam Buffer.  (line 28)
* org-roam-buffer-position:              The Org-roam Buffer.  (line 13)
* org-roam-buffer-width:                 The Org-roam Buffer.  (line 18)
* org-roam-db-location:                  Directories and Files.
                                                               (line 13)
* org-roam-directory:                    Directories and Files.
                                                               (line  8)
* org-roam-encrypt-files:                Encryption.           (line 16)
* org-roam-graph-edge-cites-extra-config: Graph Options.       (line 26)
* org-roam-graph-edge-extra-config:      Graph Options.        (line 21)
* org-roam-graph-exclude-matcher:        Excluding Nodes and Edges.
                                                               (line  8)
* org-roam-graph-executable:             Graphing.             (line 31)
* org-roam-graph-extra-config:           Graph Options.        (line 11)
* org-roam-graph-node-extra-config:      Graph Options.        (line 16)
* org-roam-graph-viewer:                 Graphing.             (line 40)
* org-roam-index-file:                   Index File.           (line 12)
* org-roam-link-title-format:            Org-roam Links.       (line 10)


File: org-roam.info,  Node: Appendix,  Next: FAQ,  Prev: Variable Index,  Up: Top

E Appendix
**********

* Menu:

* Note-taking Workflows::
* Ecosystem::


File: org-roam.info,  Node: Note-taking Workflows,  Next: Ecosystem,  Up: Appendix

E.1 Note-taking Workflows
=========================

   • Books
        • How To Take Smart Notes
          (https://www.goodreads.com/book/show/34507927-how-to-take-smart-notes)

   • Articles
        • The Zettelkasten Method - LessWrong 2.0
          (https://www.lesswrong.com/posts/NfdHG6oHBJ8Qxc26s/the-zettelkasten-method-1)

        • Building a Second Brain in Roam...And Why You Might Want To :
          RoamResearch
          (https://reddit.com/r/RoamResearch/comments/eho7de/building_a_second_brain_in_roamand_why_you_might)

        • Roam Research: Why I Love It and How I Use It - Nat Eliason
          (https://www.nateliason.com/blog/roam)

        • Adam Keesling’s Twitter Thread
          (https://twitter.com/adam_keesling/status/1196864424725774336?s=20)

        • How To Take Smart Notes With Org-mode · Jethro Kuan
          (https://blog.jethro.dev/posts/how_to_take_smart_notes_org/)

   • Threads
        • Ask HN: How to Take Good Notes
          (https://news.ycombinator.com/item?id=22473209)

   • Videos
        • How to Use Roam to Outline a New Article in Under 20 Minutes
          (https://www.youtube.com/watch?v=RvWic15iXjk)


File: org-roam.info,  Node: Ecosystem,  Prev: Note-taking Workflows,  Up: Appendix

E.2 Ecosystem
=============

A number of packages work well combined with Org-Roam:

* Menu:

* Deft::
* Org-journal::
* Note-taking Add-ons::


File: org-roam.info,  Node: Deft,  Next: Org-journal,  Up: Ecosystem

E.2.1 Deft
----------

Deft (https://jblevins.org/projects/deft/) provides a nice interface for
browsing and filtering org-roam notes.

     (use-package deft
       :after org
       :bind
       ("C-c n d" . deft)
       :custom
       (deft-recursive t)
       (deft-use-filter-string-for-filename t)
       (deft-default-extension "org")
       (deft-directory "/path/to/org-roam-files/"))

   If the title of the Org file is not the first line, you might not get
nice titles.  You may choose to patch this to use ‘org-roam’’s
functionality.  Here I’m using el-patch
(https://github.com/raxod502/el-patch):

     (use-package el-patch
       :straight (:host github
                        :repo "raxod502/el-patch"
                        :branch "develop"))

     (eval-when-compile
       (require 'el-patch))

     (use-package deft
       ;; same as above...
       :config/el-patch
       (defun deft-parse-title (file contents)
         "Parse the given FILE and CONTENTS and determine the title.
     If `deft-use-filename-as-title' is nil, the title is taken to
     be the first non-empty line of the FILE.  Else the base name of the FILE is
     used as title."
         (el-patch-swap (if deft-use-filename-as-title
                            (deft-base-filename file)
                          (let ((begin (string-match "^.+$" contents)))
                            (if begin
                                (funcall deft-parse-title-function
                                         (substring contents begin (match-end 0))))))
                        (org-roam--get-title-or-slug file))))

   The Deft interface can slow down quickly when the number of files get
huge.  Notdeft (https://github.com/hasu/notdeft) is a fork of Deft that
uses an external search engine and indexer.


File: org-roam.info,  Node: Org-journal,  Next: Note-taking Add-ons,  Prev: Deft,  Up: Ecosystem

E.2.2 Org-journal
-----------------

Org-journal (https://github.com/bastibe/org-journal) is a more powerful
alternative to the simple function ‘org-roam-dailies-today’.  It
provides better journaling capabilities, and a nice calendar interface
to see all dated entries.

     (use-package org-journal
       :bind
       ("C-c n j" . org-journal-new-entry)
       :custom
       (org-journal-date-prefix "#+TITLE: ")
       (org-journal-file-format "%Y-%m-%d.org")
       (org-journal-dir "/path/to/org-roam-files/")
       (org-journal-date-format "%A, %d %B %Y"))


File: org-roam.info,  Node: Note-taking Add-ons,  Prev: Org-journal,  Up: Ecosystem

E.2.3 Note-taking Add-ons
-------------------------

These are some plugins that make note-taking in Org-mode more enjoyable.

* Menu:

* Org-download::
* mathpix.el: mathpixel.
* Org-noter / Interleave::
* Bibliography::
* Spaced Repetition::


File: org-roam.info,  Node: Org-download,  Next: mathpixel,  Up: Note-taking Add-ons

Org-download
............

Org-download (https://github.com/abo-abo/org-download) lets you
screenshot and yank images from the web into your notes:

 [image src="images/org-download.gif" ]

Figure: org-download

     (use-package org-download
       :after org
       :bind
       (:map org-mode-map
             (("s-Y" . org-download-screenshot)
              ("s-y" . org-download-yank))))


File: org-roam.info,  Node: mathpixel,  Next: Org-noter / Interleave,  Prev: Org-download,  Up: Note-taking Add-ons

mathpix.el
..........

mathpix.el (https://github.com/jethrokuan/mathpix.el) uses Mathpix’s
(https://mathpix.com/) API to convert clips into latex equations:

 [image src="images/mathpix.gif" ]

Figure: mathpix

     (use-package mathpix.el
       :straight (:host github :repo "jethrokuan/mathpix.el")
       :custom ((mathpix-app-id "app-id")
                (mathpix-app-key "app-key"))
       :bind
       ("C-x m" . mathpix-screenshot))


File: org-roam.info,  Node: Org-noter / Interleave,  Next: Bibliography,  Prev: mathpixel,  Up: Note-taking Add-ons

Org-noter / Interleave
......................

Org-noter (https://github.com/weirdNox/org-noter) and Interleave
(https://github.com/rudolfochrist/interleave) are both projects that
allow synchronised annotation of documents (PDF, EPUB etc.)  within
Org-mode.


File: org-roam.info,  Node: Bibliography,  Next: Spaced Repetition,  Prev: Org-noter / Interleave,  Up: Note-taking Add-ons

Bibliography
............

org-roam-bibtex (https://github.com/zaeph/org-roam-bibtex) offers tight
integration between org-ref (https://github.com/jkitchin/org-ref),
helm-bibtex (https://github.com/tmalsburg/helm-bibtex) and ‘org-roam’.
This helps you manage your bibliographic notes under ‘org-roam’.


File: org-roam.info,  Node: Spaced Repetition,  Prev: Bibliography,  Up: Note-taking Add-ons

Spaced Repetition
.................

Org-fc (https://github.com/l3kn/org-fc/) is a spaced repetition system
that scales well with a large number of files.  Other alternatives
include org-drill (https://orgmode.org/worg/org-contrib/org-drill.html),
and pamparam (https://github.com/abo-abo/pamparam).


File: org-roam.info,  Node: FAQ,  Prev: Appendix,  Up: Top

F FAQ
*****

* Menu:

* How do I have more than one Org-roam directory?::


File: org-roam.info,  Node: How do I have more than one Org-roam directory?,  Up: FAQ

F.1 How do I have more than one Org-roam directory?
===================================================

Emacs supports directory-local variables, allowing the value of
‘org-roam-directory’ to be different in different directories.  It does
this by checking for a file named ‘.dir-locals.el’.

   To add support for multiple directories, override the
‘org-roam-directory’ variable using directory-local variables.  This is
what ‘.dir-locals.el’ may contain:

     ((nil . ((org-roam-directory . "/path/to/here/"))))

   All files within that directory will be treated as their own separate
set of Org-roam files.  Remember to run ‘org-roam-db-build-cache’ from a
file within that directory, at least once.

   Emacs 28.0.50 (Org mode 9.3.6)


Tag Table:
Node: Top765
Node: Introduction2627
Node: Installation4726
Node: Installing from MELPA5062
Node: Installing from the Git Repository6131
Node: Post-Installation Tasks6371
Node: Getting Started6559
Node: Anatomy of an Org-roam File10299
Node: File Aliases10765
Node: File Refs11125
Node: The Templating System11938
Node: Template Walkthrough12855
Node: Org-roam Template Expansion14472
Node: Concepts and Configuration16471
Node: Directories and Files17029
Node: The Org-roam Buffer17693
Node: Org-roam Links18811
Node: Org-roam Files19522
Node: Navigating Around19819
Node: Index File19998
Node: Encryption20830
Node: Graphing21592
Node: Graph Options23319
Node: Excluding Nodes and Edges24307
Node: Org-roam Completion System25023
Node: Roam Protocol25573
Node: Installation (1)25925
Node: The roam-file protocol29972
Node: The roam-ref Protocol30342
Node: Keystroke Index31454
Node: Command Index31610
Node: Function Index31763
Node: Variable Index32085
Node: Appendix33693
Node: Note-taking Workflows33851
Node: Ecosystem35131
Node: Deft35361
Node: Org-journal37243
Node: Note-taking Add-ons37915
Node: Org-download38247
Node: mathpixel38731
Node: Org-noter / Interleave39297
Node: Bibliography39676
Node: Spaced Repetition40114
Node: FAQ40511
Node: How do I have more than one Org-roam directory?40648

End Tag Table


Local Variables:
coding: utf-8
End:
