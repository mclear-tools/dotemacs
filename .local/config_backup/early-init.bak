;; early-init.el  -*- lexical-binding: t; mode: emacs-lisp; coding:utf-8; fill-column: 80 -*-
;;; Commentary:
;;
;; Emacs HEAD (27+) introduces early-init.el, which is run before init.el,
;; before package and UI initialization happens.
;;

;;; Startup
;;;; Speed up startup
;; Help speed up emacs initialization
(defvar cpm--file-name-handler-alist file-name-handler-alist)
(setq file-name-handler-alist nil)

;; Garbage collection
(setq gc-cons-threshold 402653184
      gc-cons-percentage 0.6)
(add-hook 'after-init-hook
          `(lambda ()
             (setq gc-cons-threshold 800000
                   gc-cons-percentage 0.1)
             (garbage-collect)) t)

;;;; Clean View
;; Disable start-up screen
(setq-default inhibit-startup-screen t)
(setq inhibit-splash-screen t)
(setq inhibit-startup-message t)
(setq initial-scratch-message "")

;; UI - Disable visual cruft
(unless (eq window-system 'ns)
  (menu-bar-mode -1))
(when (fboundp 'tool-bar-mode)
  (tool-bar-mode -1))
(when (fboundp 'scroll-bar-mode)
  (scroll-bar-mode -1))
(when (fboundp 'horizontal-scroll-bar-mode)
  (horizontal-scroll-bar-mode -1))

;; Quick start scratch buffer
(setq initial-major-mode 'fundamental-mode)

;; echo buffer
;; https://emacs.stackexchange.com/a/437/11934
(defun display-startup-echo-area-message ()
  (message ""))

;; And bury the scratch buffer, don't kill it
(defadvice kill-buffer (around kill-buffer-around-advice activate)
  (let ((buffer-to-kill (ad-get-arg 0)))
    (if (equal buffer-to-kill "*scratch*")
        (bury-buffer)
      ad-do-it)))

;;;; Directory Variables
(eval-and-compile
  (defvar cpm-emacs-dir (expand-file-name user-emacs-directory)
    "The path to the emacs.d directory.")

  (defvar cpm-local-dir (concat cpm-emacs-dir ".local/")
    "Root directory for local Emacs files. Use this as permanent
  storage for files that are safe to share across systems (if
  this config is symlinked across several computers).")

  (defvar cpm-temp-dir (concat cpm-local-dir "temp/")
    "Directory for non-essential file storage. Used by
  `cpm-etc-dir' and `cpm-cache-dir'.")

  (defvar cpm-etc-dir (concat cpm-temp-dir "etc/")
    "Directory for non-volatile storage. These are not deleted or
  tampored with by emacs functions. Use this for dependencies
  like servers or config files that are stable (i.e. it should be
  unlikely that you need to delete them if something goes
  wrong).")

  (defvar cpm-cache-dir (concat cpm-temp-dir "cache/")
    "Directory for volatile storage. Use this for transient files
  that are generated on the fly like caches and temporary files.
  Anything that may need to be cleared if there are problems.")

  (defvar cpm-elisp-dir (concat cpm-local-dir "elisp/")
    "Where personal elisp packages and scripts are stored.")

  (defvar cpm-setup-dir (concat cpm-elisp-dir "setup-config/")
    "Where the setup-init files are stored.")

;;;; Path Settings
;; Directory paths
(dolist (dir (list cpm-local-dir cpm-etc-dir cpm-cache-dir cpm-elisp-dir cpm-setup-dir))
  (unless (file-directory-p dir)
(make-directory dir t))))

;; Exec path
(defvar cpm-local-bin (concat (getenv "HOME") "/bin") "Local execs.")
(defvar usr-local-bin "/usr/local/bin")
(defvar usr-local-sbin "/usr/local/sbin")
(setenv "PATH" (concat usr-local-bin ":" usr-local-sbin ":" (getenv "PATH") ":" cpm-local-bin))
(setq exec-path (append exec-path (list cpm-local-bin usr-local-sbin usr-local-bin)))

;; Path to init files
(push cpm-setup-dir load-path)

;;;; Security
(setq gnutls-verify-error t
      tls-checktrust gnutls-verify-error
      tls-program (list "gnutls-cli --x509cafile %t -p %p %h"
                        ;; compatibility fallbacks
                        "gnutls-cli -p %p %h"
                        "openssl s_client -connect %h:%p -no_ssl2 -no_ssl3 -ign_eof")
      nsm-settings-file (expand-file-name "network-security.data" cpm-cache-dir))

;;;; Package Initialization Settings
(setq package-enable-at-startup nil)
(setq load-prefer-newer t
      package-user-dir (concat cpm-local-dir "/elpa/")
      package--init-file-ensured t)

(unless (file-directory-p package-user-dir)
  (make-directory package-user-dir t))

;; We're going to set the load path ourselves so that we don't have to call
;; =package-initialize= at runtime and incur a large performance hit. This
;; load-path will actually be faster than the one created by =package-initialize=
;; because it appends the elpa packages to the end of the load path. Otherwise
;; any time a builtin package was required it would have to search all of third
;; party paths first.
(eval-and-compile
  (setq load-path (append load-path (directory-files package-user-dir t "^[^.]" t))))
